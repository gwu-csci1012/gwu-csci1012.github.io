---
title: "**Assignment 2:** Problem Solving Example"
format:
  html:
    code-copy: false
---

<html>
<head>
    <style>
        body {
            -webkit-user-select: none; /* Safari */
            -moz-user-select: none; /* Firefox */
            -ms-user-select: none; /* IE10+/Edge */
            user-select: none; /* Standard */
        }
    </style>
</head>
<body>

**Let's start with a way to visualize of the problem:**

- The following are the two two lists provided to you:

    ```
    A = [1, 3, 5, 7, 9, 11, 13]
    B = [2, 5, 7, 9, 10, 11]
    ```

- Now consider the **first "_triple_" in list `A`**, i.e., the triple `1,3,5` <em>starts</em>  at position 0 (or at index 0 with the element `1`) as shown below.
    <pre lang="python"><code>
    A = [<b>1, 3, 5</b>, 7, 9, 11, 13]
    </code></pre>
- How do we systematically try all such triples in `A`?
    - The **second triple in list `A`** <em>starts</em> at position 1 (or at index 1 with the element `3`) as shown below.
    <pre lang="python"><code>
    A = [1, <b>3, 5, 7</b>, 9, 11, 13]
    </code></pre>
    - The **next triple in list `A`** <em>starts</em> at position 2 (or at index 2 with the element `5`) as shown below.
    <pre lang="python"><code>
    A = [1, 3, <b>5, 7, 9</b>, 11, 13]
    </code></pre>
    - And the **last triple in list `A`** <em>starts</em> at position 4 (or at index 4 with the element `9`) as shown below.
    <pre lang="python"><code>
    A = [1, 3, 5, 7, <b>9, 11, 13</b>]
    </code></pre>
- So, we could have a for-loop that ranges over all the potential <em>start</em> positions, along the following lines:
    
    ```python
    for i in range(0, ?)
    ```

- Let's now try to answer the question of **what is the last position or index in the `range()` function?** 

    - We want to do this **in terms of the length of the list**, since any list can be provided as argument to the function.

    
        ```python
        last_pos = len(A) - 3
        for i in range(0, last_pos):
        ```
    - Are the above lines of code correct?

:::{.callout-caution appearance="simple" icon="false"}
###### <span style="color:#8B4513;">**A1.1 Exercise:** </span>
Write up the above in `my_demo_problem1.py`. Test it with different lengths to make sure you print all applicable start positions. 

**Submit your program `my_demo_problem1.py`.**

<!-- Justify your code in your `assignment1.pdf`. -->
:::

- Assuming you've sorted out the last position (or index), remember that the **default start position (or index) in the `range()` function is `0`**.

- So the first line of for-loop can written in the following manner:

    ```python
    for i in range(last_pos):
    ```

- Now let's visualize what happens in the second list `B` with the very first triple of the first list `A`:
<pre lang="python"><code>
A = [<b>1, 3, 5</b>, 7, 9, 11, 13]
B = [2, 5, 7, 9, 10, 11]
</code></pre>


- We'll try this at the first position in the second list `B`, i.e., 

    - We start at the first position (index `0`) in list `B`
    - We check if the triple `1, 3, 5` from list `A` exists at in list `B` at that location (or index `0`).
    - This can be visualized with the triple `1, 3, 5` from list `A` and placed directly below the location in list `B` as shown below:
    <pre lang="python"><code>
    A = [<b>1, 3, 5</b>, 7, 9, 11, 13]
    B = [<b>2, 5, 7</b>, 9, 10, 11]
             <b>1, 3, 5</b>
    </code></pre>
- We then repeat this process at the second position in the list `B` as shown below:
    <pre lang="python"><code>
    A = [<b>1, 3, 5</b>, 7, 9, 11, 13]
    B = [2, <b>5, 7, 9</b>, 10, 11]
            <b>1, 3, 5</b>
    </code></pre>

- Next, we repeat this process at the third position, and so on.
    <pre lang="python"><code>
    A = [<b>1, 3, 5</b>, 7, 9, 11, 13]
    B = [2, 5, <b>7, 9, 10</b>, 11]
               <b>1, 3, 5</b>
    </code></pre>

- Note that we're doing this for every triple in the first list `A`.

- We will therefore have an inner loop for the second list `B` as shown below:
    
    ```python
    last_pos = ...

    # Outer loop for the list A or the first list
    for i in range(last_pos):
        last_pos_second = ...

        # Inner loop for the list B or the second list
        for j in range(last_pos_second):
            # compare the triple at i with the triple in j
    ```

**How do we compare the triple beginning at i in the first list against the triple beginning at j in the second list?**

- For example, consider `i=2` and `j=1` for the lists `A` Aand `B`
    <pre lang="python"><code>
    A = [1, 3, <b>5, 7, 9</b>, 11, 13]
    B = [2, <b>5, 7, 9</b>, 10, 11]
    </code></pre>
- We know that in list `A`
    - `5` is located at (index value) `i` (where i = 2), 
    - `7` occurs at `i+1` (i.e., index 3), and
    - `9` occurs at `i+2` (i.e., index 4).

- What about 5, 7, 9, in the second list `B`?
    - `5`is located at (index value) `j` (where j = 1),  
    - `7` occurs at `j+1` (i.e., index 2), and
    - `9` occurs at `j+2` (i.e., index 3).
- This can be visualized with the triple `5, 7, 9` in lists `A` and `B` with [emphazied font]{style='color: black'} as shown below:  
<pre lang="python"><code>
A = [1, 3, <b>5, 7, 9</b>, 11, 13]
B = [2, <b>5, 7, 9</b>, 10, 11]
</code></pre>
- We are now in a good stage of the program to start comparing the triple in the two lists.

- Look at the incomplete code below and start putting in your lines of code following the comments provided.
    
    ```python
    last_pos = ...
    for i in range(last_pos):
        last_pos_second = ...
        for j in range(last_pos_second):
            # compare the triple at i with the triple in j
            # compare A[i] with B[j], A[i+1] and B[j+1], A[i+2] with B[j+2]
    ```

:::{.callout-note}
- There are three comparions being made as indicated in the incomplete code above. 
- All three need to be tested for equality for us to declare that we've found a triple. 
- We need to therefore implement the if-conditional.
:::

- The incomplete code has now been improved with the use of the if-conditional as shown below:  

    ```python
    last_pos = ...
    for i in range(last_pos):
        last_pos_second = ...
        for j in range(last_pos_second):
            # compare the triple at i with the triple in j
            if (A[i] == B[j]) and ...
                print('Found ...')
    ```

- **Start putting in your lines of code following the comments provided.**

:::{.callout-caution appearance="simple" icon="false"}
###### <span style="color:#8B4513;">**A1.2 Exercise:** </spam>
Complete the other conditions in the if-statement in `my_demo_problem2.py`. And also complete the print statement.

**Submit your program `my_demo_problem2.py`.**
:::

**Finally, we need to account for the case where no such triple is found.**

:::{.callout-caution appearance="simple" icon="false"}
###### <span style="color:#8B4513;">**A1.3 Exercise:** </span>
Complete the program in `my_demo_problem3.py` by including 

- The above ideas and the case where no triple is found.
- `my_demo_problem3.py` should include the code needed for the function `search_sublist()` shown below:

<!-- When do we know for sure that no such triple exists? Explain how you solved the latter issue (no such triple found) in `assignment1.pdf`.  -->

```python
def search_sublist(X, Y):
    # Determine whether and where a 3-element sub-list of X exists in Y.

A = [1, 3, 5, 7, 9, 11, 13]
B = [2, 5, 7, 9, 10, 11]
C = [10, 2, 5, 7, 15, 13]
D = [9, 11, 13, 14, 15]

# This should print: Found: at i=2 in X and j=1 in Y
search_sublist(A, B)

# This should print: No 3-element sublist found
search_sublist(A, C)

# This should print: Found: at i=4 in X and j=0 in Y
search_sublist(A, D)
```

**Submit program `my_demo_problem3.py` that includes the function `search_sublist()`.**
:::