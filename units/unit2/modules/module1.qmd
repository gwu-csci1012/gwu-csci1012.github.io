---
title: "**Module 1:**  Tuples, Sets, Dictionaries and Choropleth Maps"
format:
  html:
    code-copy: false
---

<html>
<head>
    <style>
        body {
            -webkit-user-select: none; /* Safari */
            -moz-user-select: none; /* Firefox */
            -ms-user-select: none; /* IE10+/Edge */
            user-select: none; /* Standard */
        }
    </style>
</head>
<body>


## Objectives

<!-- :::{.callout-note}
The topics are introduced with a "not on the final exam" intent, for your understanding and use in the next module's exercises, but not tested on the final exam.
::: -->

This is a somewhat light module aimed at introducing a new member of the
family: <b>datatool</b>

- We've already worked with drawtool and wordtool.
- Drawtool is based on a popular Python graphing package called <em>Matplotlib</em>:
    - Matplotlib is a powerful package for all kinds of plotting.
    - However, it can be difficult to understand how to use effectively.
    - To simplify, we developed drawtool so that you can perform both plotting and simple drawing.
- <em>Plotly</em> is a recent competitor of Matplotlib:
    - Plotly is designed to be web-friendly, to let Python programs have output that renders in a browser, so that websites can display nice graphics.
    - Plotly has stronger support for maps (as in geographic maps) than Matplotlib.
    - However, just like Matplotlib, it can be difficult to use, especially since there are two fundamentally different kinds of maps.
- <em>Pandas</em> is perhaps the most popular Python package aimed at data handling and data science applications. It too takes a while to learn.
- Thus, to simplify, we have developed <b>datatool</b>, to make it easy to do typical things like plotting graphs but also to work with data files, and especially, maps.

:::{.callout-note}
Datatool does not display via its own GUI. Instead, datatool uses a browser, depending on whether you are using Mac or Windows:

- **Mac/Linux:** <em>If you don't have Firefox, you will need to <a href="https://www.mozilla.org/en-US/firefox/new/">**install Firefox**</a> and have that running (open a tab to any webpage).</em>
- **Windows:** Your default browser will do.
:::

- Also, you will need to be connected (online) because datatool downloads map data from certain websites.

## 1.0 Tuples
In this section and the ones that follow, we'll touch lightly upon a few topics that are "not on the final exam" but will be useful in general.

Some of these concepts will be directly used in the next module.

Suppose we want to write a function that computes both the square and cube of a number:

- One option is to write two separate functions
 
    ```python
    def square(x):
        return x*x

    def cube(x):
        return x*x*x

    x = 5
    print(x, square(x), cube(x))
    ```
- We can alternatively write one function that computes and returns <em>two things</em>:
  
    ```python
    def do_both(x):
        square = x*x
        cube = square*x 
        return (square, cube)

    x = 5
    (y, z) = do_both(x)
    print(x, y, z)
    ```
- Notice that the return statement returns a <em>pair</em> of values:
  
    ```python
    return (square, cube)
    ```
    And that the pair is enclosed in parentheses.
- And notice that, since two values are being returned, we need a pair to capture the return values:
  
    ```python
    (y, z) = do_both(x)
    ```
- We can go beyond a pair to any number of such "grouped" variables:
  
    ```python
    def do_more(x):
        square = x*x
        cube = square*x 
        fourth = cube*x
        fifth = fourth*x
        return (square, cube, fourth, fifth)

    x = 5
    (a, b, c, d) = do_more(x)
    print(x, a, b, c, d)
    ```
- Such a grouping of variables is called a <em>tuple</em>.

Tuples are similar to lists in many ways, but different in one crucial aspect:

- First, let's examine how to write the same `do_both()` function above but using lists:
  
    ```python
    def do_both_list(x):
        square = x*x
        cube = square*x 
        return [square, cube]

    x = 5
    [y, z] = do_both_list(x)
    print(x, y, z)
    ```
    This works just fine.
- Another way in which a tuple is like a list is in using square-brackets and position indices to access individual elements, as in:
  
    ```python
    # List version:
    L = do_both_list(x)
    print(L[0], L[1])      # L[0] has the square, L[1] has the cube

    # Tuple version:
    t = do_both(x)
    print(t[0], t[1])      # t[0] has the square, t[1] has the cube
    ```
- However, here's the difference:
  
    ```python
    # List version:
    L = do_both_list(x)
    L[0] = 0              # This is allowed

    # Tuple version:
    t = do_both(x)
    t[0] = 0              # This is NOT allowed
    ```
    Thus, you can replace a list element but you cannot replace a tuple element.
- This is in fact a bit subtle, as this example shows:
  
    ```python
    x = 3
    y = 4
    t = (x, y)   # The tuple's value is now fixed.
    print(t)     # (3, 4)
    x = 2
    print(t)     # (3, 4)
    ```
    Once the tuple is <em>instantiated</em> (that's the technical term for "made") then the tuple's value cannot be changed.
- You can of course assign a different tuple value to a tuple variable as in:
  
    ```python
    t = (1, 2)
    print(t)
    t = (3, 4)
    print(t)
    ```
    Here, we're simply replacing one fixed-value tuple with another.
- Tuples are therefore said to be an <em>immutable</em> type (along with strings).
- Why use tuples at all? It's to allow programmers to signal clearly that their tuples shouldn't be changed.
- This turns out to be convenient for <em>mathematical tuples</em> (like points on a graph), which are similar.

Groups of tuples can be combined into lists and other data structures.

It's very useful in working with points (the mathematical point you draw with coordinates) and other mathematical structures that need more than one number to describe.

For example, here's a program that, given a list of points, finds the leftmost point (the one with the least x value).
```python
def leftmost(L):
    leftmost_guess = L[0]
    for q in L:
        if q[0] < leftmost_guess[0]:
            leftmost_guess = q
    return leftmost_guess

list_of_points = [(3,4), (1,2), (3,2), (4,3), (5,6)]
(x,y) = leftmost(list_of_points)
print('leftmost:', (x,y) )
# leftmost: (1, 2)
```

:::{.callout-caution appearance="simple" icon=false}
### Exercise 1.1

Type up the above in `my_tuple_example.py`. Then trace through the iteration in your module pdf.
:::

:::{.callout-caution appearance="simple" icon=false}
### Exercise 1.2

Consider the following:
```python
import math

def distance(p, q):
    return math.sqrt( (p[0]-q[0])**2 + (p[1]-q[1])**2 )

def find_closest_point(p, L):
    # Write your code here to find the closest point in L to p
    # and to return both the point and the distance to it from p.

list_of_points = [(3,4), (1,2), (3,2), (4,3), (5,6)]
query_point = (5,4)
(c, d) = find_closest_point(query_point, list_of_points)
print('closest:',c,' at distance', d)
# Should print: 
# closest: (4, 3)  at distance 1.4142135623730951
```
In `my_tuple_example2.py`, fill in the missing code to find the closest point in a list of points to a given query point. Return both the closest point and the distance to the query point as a tuple.
:::

## 1.1 Sets
The general mathematical term <em>set</em> means a "collection of like things but without duplicates".

Python has special syntax and operations to support this mathematical notion:

- Here are two sets being defined:
 
    ```python
    A = {2, 4, 5, 6, 8}       # Curly brackets
    B = {'hello', 'hi', 'hey', 'howdy'}
    ```
- The first set contains five numbers, whereas the second contains four strings.

Consider this variation
```python
A = {2, 4, 5, 6, 8}
B = {'hello', 'hi', 'hey', 'howdy'}

C = {8, 5, 4, 6, 2, 4, 5, 5}
print(C)
if A == C:
    print('they are equal')
else:
    print('they are not equal')
```

Given what we've said about sets, what will be printed?

:::{.callout-caution appearance="simple" icon=false}
### Exercise 1.3

Type up the above in `my_set_example.py` to find out.
:::

:::{.callout-note}
- Even though a set may not have duplicates, we are actually allowed to <em>try</em> to create duplicates:
  
    ```python
    C = {8, 5, 4, 6, 2, 4, 5, 5}
    ```
    Python simply removes the duplicates.
- Python also organizes sets so that sets can be compared for equality: 
    Thus, printing the set
  
    ```python
    C = {8, 5, 4, 6, 2, 4, 5, 5}
    ```
    actually results in

    ```python
    {2, 4, 5, 6, 8}
    ```
:::

What can we do with sets?

- The most common operation is to see whether some value is in some set we've defined using the keyword in:
  
    ```python
    def check_vowel(x):
        vowels = {'a','e','i','o','u'}
        if x in vowels:
            print(x, 'is a vowel')
        else:
            print(x, 'is not a vowel')

    check_vowel('a')
    check_vowel('b')
    ```
- Other, more mathematical operations, feature different ways of combining sets. For example:
  
    ```python
    A = {2, 4, 5, 6, 8}
    B = {1, 3, 5, 6}

    D = A | B    # union
    print(D)
    ```
    Here, D contains every element across both sets.
- Other such operators include: 
    - intersection (elements that are in both sets)
    - difference (elements in one set that are not in the other)
- Since our goal is merely to give you a taste of these advanced topics, we won't say much more about these operations.

Instead, let's look at an application:

- In <em>text processing</em>, the term <em>stopword</em> is often used to describe commonly used words that serve little or no purpose in text analysis:
    - When you analyze digitized texts for meaning, topic and dialogue (for example), words like "the", "of", "and" get in the way of analysis.
    - They are often discarded from text analysis that seeks to analyze more significant words.
- We'll ask the question: what proportion of text typically consists of stopwords?
  <br>(The answer is surprising, as we'll see).
- To answer the question, we'll scan text word-by-word and see if each word is in the <em>set</em> of stopwords.
- Although there are hundreds of stopwords, we'll keep things simple by targeting a few.

Let's write this up:
```python
import wordtool as wt 

# The 25 most common stopwords
stopwords = {'the','be','to','of','and','a','in','that','have','I',
             'it','for','not','on','with','he','she','you','do','as',
             'at','his','her','they','by'}

wt.open_file_byword('alice.txt')

s = wt.next_word()
num_stopwords = 0
total_words = 0

while s != None:
    if s in stopwords:
        num_stopwords += 1   # Count stopwords
    total_words += 1         # And all words
    s = wt.next_word()

percent_stopwords = 100 * (num_stopwords/total_words)
# Compare this:
string_to_print = '% of stopwords:{0:.2f}'.format(percent_stopwords)
print(string_to_print)
# to this:
# print(percent_stopwords)
```


:::{.callout-caution appearance="simple" icon=false}
### Exercise 1.4

Type up the above in `my_stopwords.py`. Then, compare the percentage of stopwords in these two famous texts: <a href="../../../media/units/unit2/module2.1/alice.txt">**Alice in Wonderland**</a> and Darwin's <a href="../../../media/units/unit2/module2.1/darwin.txt">**The Origin of the Species**</a>. Try two other texts from Project Gutenberg, and report the results in your module pdf.
:::

As an aside, we'll point out something about <em>string formatting</em>, which is also an advanced topic:

- It's plain ugly (and often useless) to print out all the digits in a floating number like:
  
    ```python
    % of stopwords: 31.969357958208498
    ```
- Instead, we'd like
  
    ```python
    % of stopwords: 31.97
    ```
- Specifying to Python how you'd like a number <em>formatted</em>, unfortunately, is a bit of a chore using somewhat cryptic commands embedded within strings:
  
    ```python
    string_to_print = '% of stopwords:{0:.2f}'.format(percent_stopwords)
    print(string_to_print)
    ```
    We'll explain this one with the understanding that a proper look
    into this topic is beyond the scope of this course:
    - First, one builds the target strings using typical quotes, as in:
  
        ```python
        string_to_print = '% of stopwords: '
        ```
    - Then, attach the format function with the desired variable whose value we wish to print nicely:
  
        ```python
        string_to_print = '% of stopwords: '.format(percent_stopwords)
        ```
    - Then, figure out where in the string you want the resulting number and use curly brackets:
  
        ```python
        string_to_print = '% of stopwords: {0}'.format(percent_stopwords)
        ```
    Here, 0 means the first such number. If had a second number, we'd use 1, and so on.
    - Finally, specify both how many digits after the decimal point, and that this number is a float:
  
        ```python
        string_to_print = '% of stopwords: {0:.2f}'.format(percent_stopwords)
        ```
- Yes, a bit cryptic and difficult to understand. But eventually, when you get used to it, it's powerful when you are doing a lot of text output.

## 1.2 Dictionaries
Consider this problem:

- We have a data file that looks like this:
    
    ```
    apple
    banana
    apple
    pear
    banana
    banana
    apple
    kiwi
    orange
    orange
    orange
    kiwi
    orange
    ```
This might represent, for example, a record of sales at a fruit stand.
- We'd like to count how many of each fruit.
- One way would be to define a counter for each kind:
    
    ```python
    num_apples = 0
    num_bananas = 0
    num_pears = 0
    num_kiwis = 0
    num_oranges = 0
    with open('fruits.txt','r') as data_file:
        line = data_file.readline()
        while line != '':
            fruit = line.strip()
            if fruit == 'apple':
                num_apples += 1
            elif fruit == 'banana':
                num_bananas += 1
            elif fruit == 'pear':
                num_pears += 1
            elif fruit == 'kiwi':
                num_kiwis += 1
            elif fruit == 'orange':
                num_oranges += 1
            else:
                print('unknown fruit:', fruit)
            line = data_file.readline()

    print('# apples:', num_apples)
    print('# bananas:', num_bananas)
    print('# pears:', num_pears)
    print('# kiwi:', num_kiwis)
    print('# oranges:', num_oranges)
    ```

:::{.callout-caution appearance="simple" icon=false}
### Exercise 1.5

Type up the above in `my_fruits.py` and use the data file <a href="../../../media/units/unit2/module2.1/fruits.txt" download>**fruits.txt**</a> to confirm. Next, in `my_fruits2.py`, change the program to accommodate the additional fruits in  <a href="../../../media/units/unit2/module2.1/fruits2.txt" download>**fruits2.txt**</a>.
:::

Aside from being tedious, this approach has other issues:

- One would like to be able to write a general program that does not need to know which fruits are in a file.
- What if there were a thousand different kinds of items (not fruits, say, but department-store items)?
- A single mistake in a variable can cause the counts to be wrong.

Fortunately, the use of <em>dictionaries</em> will make it easy:
```python
# Make an empty dictionary
counters = dict()

with open('fruits.txt','r') as data_file:
    line = data_file.readline()
    while line != '':
        fruit = line.strip()
        if fruit in counters.keys():
            # If we've seen the fruit before, increment.
            counters[fruit] += 1
        else:
            # If this is the first time, set the counter to 1
            counters[fruit] = 1
        line = data_file.readline()

print(counters)
```

:::{.callout-caution appearance="simple" icon=false}
### Exercise 1.6

Type up the above in `my_fruits3.py` and first apply it to  <a href="../../../media/units/unit2/module2.1/fruits.txt" download>**fruits.txt**</a> and then to <a href="../../../media/units/unit2/module2.1/fruits2.txt" download>**fruits2.txt**</a>. (Submit your program with the latter file as the input file.) In your module pdf, describe what you had to change in the code to make it work for the second file.
:::

Now let's explain:

- A <em>dictionary</em> is a technical term that is only somewhat related to an actual English dictionary.
- Think of an English dictionary as something where you <em>look up</em> a word and <em>receive</em> its meaning.
- They operations here are <em>look up</em> and <em>receive</em> an associated <em>value</em> (the word's meaning, in this case).
- In Python, a dictionary is a structure that lets you associate one kind of data with another.
- The technical equivalent of a word is called a <em>key</em> and the equivalent of the meaning is called the <em>value</em>.
- So, a dictionary is a collection of key-value pairs.
- Here's an example:
  
    ```python
    d = {'apple': 3, 'banana': 3, 'pear': 1, 'kiwi': 2, 'orange': 4}
    ```
    In this case, we're associating

    - The value 3 with the key 'apple'
    - The value 3 with the key 'banana'
    - The value 1 with the key 'pear'
    - The value 2 with the key 'kiwi'
    - The value 4 with the key 'orange'
- Conveniently, Python allows array indexing using the key:
 
    ```python
    d = {'apple': 3, 'banana': 3, 'pear': 1, 'kiwi': 2, 'orange': 4}

    print(d['apple'])  # Prints 3

    d['banana'] = 0    
    # Which changes the value associated with 'banana' to 3
    ```
- The above is an example of a dictionary that's already built (after we've processed the data).
- To process data on-the-fly, we need an additional operation that an English dictionary does not really have: we need to be able to <em>add</em> something that's not already there.
- To add a new key, we simply use it as an index:
  
    ```python
    d = {'apple': 3, 'banana': 3, 'pear': 1, 'kiwi': 2, 'orange': 4}

    d['plum'] = 0
    ```
With this understanding we can now revisit the code in the fruit example:

- We've seen how to read a file line-by-line before
 
    ```python
    with open('fruits.txt','r') as data_file:
        line = data_file.readline()
        while line != '':
            fruit = line.strip()           # Remove whitespace on either side

            # This is where we'd do something with the datda

            line = data_file.readline()    # Get the next line
    ```
- The rest is merely the dictionary part:
  
    ```python
    with open('fruits.txt','r') as data_file:
        line = data_file.readline()
        while line != '':
            fruit = line.strip()           # Remove whitespace on either side

            if fruit in counters.keys():
                # If we've seen the fruit before, increment.
                counters[fruit] += 1
            else:
                # If this is the first time, set the counter to 1
             counters[fruit] = 1

            line = data_file.readline()    # Get the next line
    ```

:::{.callout-caution appearance="simple" icon=false}
### Exercise 1.7

In  `my_stopwords2.py`, write code that uses a dictionary to compare the relative occurrence of stopwords in `alice.txt` and `darwin.txt`. In particular, we'd like to know: what percentage of the stopword occurence can be attributed to 'the', what percentage to 'and', and so on. For `alice.txt` the output should look  <a href="../../../media/units/unit2/module2.1/alice_output.txt" download>**like this**</a> (not necessarily in the same order) using the string formatting from the previous section. In your module pdf, compare the outputs for the two texts: do the stopwords occur with similar relative frequencies across the two texts?
:::

## 1.3 Advanced topic: global variables 
Suppose we have the following application:

- We prompt the user to enter the parameters (the coordinates of the center, and radius) of circle that needs to be drawn.
- We do this repeatedly until the user is done (empty input) and then draw all the circles.
- This is the kind of code we'd like to write:
  
    ```python
    # ... For brevity, we're not showing the import, setting up drawtool etc ...

    # Read circle data from the user:
    line = input('Enter circle parameters: ')
    while line != '':
        process_line(line)
        line = input('Enter circle parameters: ')

    # A method that'll access the list of circles
    draw_circles()

    dt.display()
    ```
- What we'll do is have a <em>list</em> of circles:
  
    ```python
    # The list of circles
    circles = []

    def process_line(line):
        # Code for extracting the center coordinates and radius
        # This will add to the list circles

    def draw_circles():
        # Code for drawing the circles: will access the list circles

    line = input('Enter circle parameters: ')
    while line != '':
        process_line(line)
        line = input('Enter circle parameters: ')

    draw_circles()

    dt.display()
    ```
- Here, the variable `circles` is called a <em>global</em> variable because it can be access inside other functions defined in the file.
- So, what would be an example of a non-global variable?
- Let's fill out the code and see:
  
    ```python
    circles = []                      # The global variable

    def process_line(line):
        parts = line.split()          # parts is a local variable
        x = float(parts[0])
        y = float(parts[1])
        r = float(parts[2])
        circle = (x,y,r)              # We've used a tuple here!
        circles.append (circle)       # Accessing global circles

    def draw_circles():
        dt.set_color('b')
        for c in circles:             # Accessing global circles
            dt.draw_circle(c[0], c[1], c[2])

    line = input('Enter circle parameters: ')
    while line != '':
        process_line(line)
        line = input('Enter circle parameters: ')

    draw_circles()

    dt.display()
    ```

Let's create a simpler example to illustrate:

- Consider this:
 
    ```python
    x = 5

    def some_func():
        y = x + 1
        print(y)

    def some_other_func():
        z = x + 2
        print(z)
        # print(y)         # This would fail: we can't access y here

    some_func()          # Prints 6
    some_other_func()    # Prints 7
    ```
- Let's point out:
![](../../../media/units/unit2/module2.1/globals-code.png)
- Thus: to share variables across functions, define the variables <em>outside</em> the functions.
- In which case they become global variables.

That would be the end of it, but there's one more complication:

- You cannot <em>modify</em> a global variable inside a function without explicitly stating an intention to do so.
- So, suppose we wanted to modify x in the example:

    ```python
    x = 5

    def some_func():
        global x        # Explicit statement of intent to modify
        x = x + 1
        y = x + 1
        print(y)

    def some_other_func():
        z = x + 2
        print(z)

    some_func()         # Prints 7
    some_other_func()   # Prints 8
    ```

Now let's go back to the circle-drawing example to see an instance where modifying a global is useful:

- Suppose we want to track the smallest circle (smallest radius) and draw that circle in red.
- Thus, as we get user input line-by-line, we'll need to update the smallest.
- Here's part of the code:
  
    ```python
    # For brevity, we're not showing the import, setting up drawtool etc

    # ... (stuff left out) ... 

    # Global variable circles (a list) available to all functions
    circles = []
    smallest_r = 10
    smallest = None

    def process_line(line):
        global smallest_r, smallest   # Identify globals being modified
        parts = line.split()
        x = float(parts[0])
        y = float(parts[1])
        r = float(parts[2])
        circle = (x,y,r) 
        if r < smallest_r:
            smallest_r = r            # Modifying global smallest_r
            smallest = circle         # Modifying global smallest
        circles.append (circle)       # Accessing global circles

    def draw_circles():
        # Fill in the code here to draw the smallest in red
        # and the other circles in blue.

    # The rest of the code is the same as before ... (read line by line etc)
    ```

:::{.callout-caution appearance="simple" icon=false}
### Exercise 1.8

In `my_circles.py`, copy over the above and from the earlier example, and then fill in code in the `draw_circles()` function to complete the program. When the user types, for example,
```python
Enter circle parameters: 3 4 3
Enter circle parameters: 4 3 1
Enter circle parameters: 5 7 2
Enter circle parameters: 
```
the output should be:
![](../../../media/units/unit2/module2.1/draw-circles.png)
:::

## 1.4 Multiple files
Large Python applications consists of tens of thousands of lines of code.

Most such applications actually consist of hundreds of Python programs bundled together and where one program can call functions in another.

We've already seen examples with the use of drawtool and wordtool.

Why are applications broken into multiple files?

- One large file is unwieldy to understand and work with in an editor (imagine the scrolling difficult with a thousand lines).
- It's much easier to separate out functionality and test each piece. Robustly tested programs can be left alone while refining those that need work.
- Separated functionality is useful in other projects.
- If one piece needs upgrading, you can upgrade just that part if it's in a separate file.

Let's build a simple example:

- Suppose we put together a file called `my_math_functions.py` which has
  
    ```python
    import math

    pi = 3.141

    def square(x):
        return x*x

    def cube(x):
        return x*x*x

    def distance(x1, y1, x2, y2):
        # Write your code here
    ```
- Then in an another file called `my_math_application.py` you could write:
  
    ```python
    import my_math_functions as m

    x = 2
    y = m.square(5)
    print(y)

    x2 = 3
    y2 = m.cube(x2)
    print(y2)

    d = m.distance(x,y, x2, y2)
    print(d)
    ```
- Notice the `import` statement at the top of the file:
  
    ```python
    import my_math_functions as m
    ```
    This has the `import` keyword, the name of the other file, and a shortcut.
- If we did not have the shortcut, we'd have to write code like:
  
    ```python
    import my_math_functions 

    x = 2
    y = my_math_functions.square(5)
    print(y)
    ```
    Which is perfectly legit but a bit tedious.
- To access something from another file, we use the dot (period):
  
    ```python
    y = m.square(5)
    ```
- One can access a variable in the other file as well. 

    ```python
    print(m.pi)
      ```

:::{.callout-caution appearance="simple" icon=false}
### Exercise 1.9

Complete the code for the `distance()` function and write the above two programs (using the file names as above) so that the output is:
```python
25
27
2.23606797749979
```
:::

## 1.5 String formatting and numbers
Consider this program:
```python
x = 0
for i in range(5):
    print('i=', i, 'x=', x)
    x += 0.1
```

:::{.callout-caution appearance="simple" icon=false}
### Exercise 1.10

Type up and run in `my_format.py`.
:::

You observed output like:
```python
i= 0 x= 0
i= 1 x= 0.1
i= 2 x= 0.2
i= 3 x= 0.30000000000000004
i= 4 x= 0.4
```

Why the ugly output?

- There are really three questions here, the second of which is a bit subtle.
- The first one is: why doesn't Python see that most of the other values are bring printed nice, so why not print `0.3` instead of `0.30000000000000004`?
- The second, more sutble one, is: our for-loop clearly wants to increment by 0.1, which means x should be 0.3 and not 0.30000000000000004.
- The third implied question is: how do we actually limit the number of digits printed after the decimal?

Let's answer these questions:

1. <em>Why doesn't Python recognize unnecessary digits?</em>

    - This is because Python does not want to second guess the programmer's intent.
    - Maybe you do want the digits.

2. <em>How did 0.3 become 0.30000000000000004?</em>

    - A computer's memory has two kinds of limitations, and one "feature".
    - One: it cannot store beyond a certain accuracy (and computers differ based on their hardware).
    - Two: when calculations are performed, this storage limitation forces some arithmetic to be slightly wrong (many digits after the decimal point).
    - The "feature" is that computers store binary numbers, not our kind of decimal numbers. This means a decimal version of a binary number might have to be an approximation.

3. OK, how do we actually print nicely?
  
    - This is a bit of an advanced topic, so we'll only provide a simple example.
    - The solution is to use a special set of <em>formatting</em> commands, like the ones you saw a long time ago (remember \n?)

Here's how it works for the above program:
```python
x = 0
for i in range(5):
    format_string = 'i = {0:2d}  x = {1:.2f}'
    string_to_print = format_string.format(i, x)
    print(string_to_print)
    x += 0.1
```

Let's explain:

- A format string is the eventual desired string that needs to be printed but with some placeholders:
  
    ```python
    format_string = 'i = {0:2d}  x = {1:.2f}'
    ```
- In this case, there are two placeholders:
  
    ```python
    format_string = 'i = {0:2d}  x = {1:.2f}'
    ```
    Placeholders are enclosed in curly brackets.
- Each placeholder begins with a number that will eventually determine which variable gets its value into the placeholder.
- So, here we have variables 0 and 1:
  
    ```python
    format_string = 'i = {0:2d}  x = {1:.2f}'
    ```
- We feed the <em>values</em> via the `format()` function:
  
    ```python
    format_string = 'i = {0:2d}  x = {1:.2f}'
    string_to_print = format_string.format(i, x)
    ```
    This is what lets `format()` put the value of i in place of the "0" and the value of x in place of the "1".
- All that's left to explain are the cryptic commands that follow the "0" and "1" respectively:
  
    ```python
    format_string = 'i = {0:2d}  x = {1:.2f}'
    ```
    The first one says, in effect, "use a minimum of 2 spaces and expect an integer". The second says "expect a float and restrict the number of post-decimal digits to 2".

String formatting has more to it, but that's all we'll say about it here.

## 1.6 Randomness
As we've seen throughout the course, it is useful to be able to have Python generate random numbers:

- We use random numbers to answer statistical questions.
- Random numbers were also useful in creating patterns, as in art.

However, there's an important thing to know about random generation.

Consider this program:
```python
import random

#random.seed(123)

for i in range(5):
    x = random.uniform(1.0, 10.0)
    print(x)
```

:::{.callout-caution appearance="simple" icon=false}
### Exercise 1.11

Type up the above `my_random_example.py`. Run it multiple times and observe the output. Next, un-comment the line 
```python
#random.seed(123)
```
and run it again multiple times. Then, change the number 123 in the seed to any number between 1 and 1000, and once more run the program many times.
:::

How random generation works:

- Python uses a mathematical function with a so-called "seed" to produce random numbers.
- The numbers aren't really random, because a particular seed will produce the same numbers, which is why they're called pseudorandom numbers.
- However, if we're doing things like computing averages, a pseudorandom sequence, provided it's long enough, is a reasonably good approximation.
- Is there ever a reason to fix a seed?
    - Turns out, yes. It's very useful for debugging. 
    - Using a seed causes your program to be <em>repeatable</em> (with the same pseudorandom sequence).
    - So, typically, one uses a seed when getting your program to work.
    - After it's working, you can comment out the seed.
- If a seed is not provided, Python uses the local time or something like that as the seed, so that repeated runs produce different results.

## 1.7 What else is there in Python?
Our goal in this almost-final module was to:

- Introduce the all-important topic of <em>arrays</em>.
- Lightly sketch a few advanced topics to introduce ideas and show some examples, without expecting mastery of all the details.

In the next module, we will dive into examples from across the disciplines. Some of these advanced topics will be useful

So, one might ask: what's left in Python to learn?

Quite a bit it turns out:

- Like many modern programming languages, Python is large enough that one needs a few courses to experience all of it.
- Some concepts are advanced enough to need weeks to cover (example: <em>objects</em>).
- Others need a background in <em>data structures</em> to understand <em>how</em> they work (example: dictionaries).
- Yet others involve library functions and external packages.

Do you need to learn more? Is what we've learned enough to achieve a good deal?

We'll have more to say about this in a later module.


## 1.8 Getting set up for datatool
If you've downloaded Anaconda as directed earlier in the course, you should already have <em>Pandas</em> and <em>Plotly</em> installed.

Let's give this a test.

:::{.callout-note}
To use datatool, you must follow the separate instructions for Mac and Windows:

- Mac users: you need to have Firefox running and open to any page, such as this one.
- Windows users: Your default browser will do.
:::

:::{.callout-caution appearance="simple" icon=false}
### Exercise 1.12

Download <a href="../../../media/useful/datatool.py" download>**datatool.py**</a>, <a href="../../../media/units/unit2/module2.1/simpledata.csv" download>**simpledata.csv**</a>, and <a href="../../../media/units/unit2/module2.1/line_graph_example.py" download>**line_graph_example.py**</a>, and then run the latter. This should automatically open a new tab in Firefox showing this figure:
![](../../../media/units/unit2/module2.1/linegraph.png)

If this did NOT work, then you will need to [**install Pandas and Plotly via Anaconda**](install-pandas-plotly.qmd) and use Spyder (instead of Thonny).
:::

:::{.callout-tip}
You also need to be connected because datatool downloads some map-drawing files from designated websites.
:::

## 1.9 CSV data
When hearing buzzwords like "data science" or "data analytics", one is led to ask: exactly what is meant by data, and what form does it take on computers?

We need to be aware of two such forms:

- One is the form it takes as a <em>file</em>.
- The other is: how do we store it in our Python code?

Here are some basic types of data files:

- <em>Text data</em>. This is just plain text but can be found (and stored) as files of different kinds: Word files, plain text files (as we've seen with our text examples), and webpages (which contain text).
    - Example: see <a href="../../../media/units/unit2/module2.1/alice.txt" download>**this file**</a>
    - Here, the data is in plain text format, which means we can use something like wordtool to iterate through words, letters etc.
    - Once we've read the words in the file, our program could store the words in a list.
- <em>Numeric-only data</em>. This kind of data is often presented in plain text files:
    - Example: see <a href="../../../media/units/unit2/module2.1/weatherdiff.txt" download>**this file**</a>, which has pressure-difference readings from two weather stations in the Pacific (it's called the Southern Oscillation, used to predict El-Nino). 
    - There's one reading for each month, a list of 12 numbers.
    - Numbers are often stored in arrays inside a program.
- <em>Image data</em>. Images are stored in various formats such as JPG or PNG.
    - Example: see <a href="../../../media/units/unit2/module2.1/washdc.jpg" download>**this JPG file**</a>.
    - As we've seen, a color image is stored as 3D array in a program.

CSV files for mixed data:

- Most real world data sets combine different data together.

- For example, even in purely numeric data (such as the weather data example above), we might have multiple "columns" of data as in:
    
    ```
    Oscillation  Year          Year       Month
    ----------------------------------------------
    -0.7         1955        1955         1
    1.3         1955        1955         2
    0.1         1955        1955         3
    -0.9         1955        1955         4
    0.8         1955        1955         5
    1.6         1955        1955         6
    1.7         1955        1955         7
    1.4         1955        1955         8
    1.4         1955        1955         9
    1.5         1955        1955        10
    1.4         1955        1955        11
    0.9         1955        1955        12
    ```

- But even more commonly, numeric and text data are often found together, as in:
    
    ```
        city      lat      long       country iso2 iso3  population
       Tokyo  35.6897  139.6922         Japan   JP  JPN    37977000
     Jakarta  -6.2146  106.8451     Indonesia   ID  IDN    34540000
       Delhi  28.6600   77.2300         India   IN  IND    29617000
      Mumbai  18.9667   72.8333         India   IN  IND    23355000
      Manila  14.5958  120.9772   Philippines   PH  PHL    23088000
    Shanghai  31.1667  121.4667         China   CN  CHN    22120000
   Sao Paulo -23.5504  -46.6339        Brazil   BR  BRA    22046000
       Seoul  37.5833  127.0000  Korea, South   KR  KOR    21794000
 Mexico City  19.4333  -99.1333        Mexico   MX  MEX    20996000
   Guangzhou  23.1288  113.2590         China   CN  CHN    20902000
    ```

    This type of table-like format is possibly the most common type of data.

- While one could store this in a plain text file as in <a href="../../../media/units/unit2/module2.1/cities.txt" download>**this example**</a>, it is much more convenient to use the <b>CSV format</b>.

- The same data in CSV format looks like this:
    
    ```
    city,lat,long,country,iso2,iso3,population
    Tokyo,35.6897,139.6922,Japan,JP,JPN,37977000
    Jakarta,-6.2146,106.8451,Indonesia,ID,IDN,34540000
    Delhi,28.66,77.23,India,IN,IND,29617000
    Mumbai,18.9667,72.8333,India,IN,IND,23355000
    Manila,14.5958,120.9772,Philippines,PH,PHL,23088000
    Shanghai,31.1667,121.4667,China,CN,CHN,22120000
    Sao Paulo,-23.5504,-46.6339,Brazil,BR,BRA,22046000
    Seoul,37.5833,127.0,"Korea, South",KR,KOR,21794000
    Mexico City,19.4333,-99.1333,Mexico,MX,MEX,20996000
    Guangzhou,23.1288,113.259,China,CN,CHN,20902000
    ```
   - Whitespace is removed
   - Commas are used to separate data.

For the above example, <a href="../../../media/units/unit2/module2.1/cities.csv" download>**this is the CSV file**</a>, which you can store and open in Excel or Google-sheets.

- You can see why **CSV** stands for "**Comma Separated Values**".

Next, let's write some code to work with CSV files.
```python
from datatool import datatool

dt = datatool()
dt.load_csv('cities.csv')
dt.print_data()
```

:::{.callout-caution appearance="simple" icon=false}
### Exercise 1.13

First, download <a href="../../../media/units/unit2/module2.1/cities.csv" download>**cities.csv**</a>. Then, type up the above in `my_data_example.py` and confirm that you see the same data printed out. You will notice an additional "row number" column as the first column.
:::

It is often convenient CSV data into an array, as in this example:
```python
from datatool import datatool

dt = datatool()
dt.load_csv('cities.csv')

D = dt.get_data_as_array()
print(D)
```

:::{.callout-caution appearance="simple" icon=false}
### Exercise 1.14

In `my_data_example2.py`, add code to print the average city population using these 10 cities. You should get 25643500.00 (larger than the third most populous U.S. state).
:::

## 1.10 Using `datatool` for plotting
Often, one of the first things we do with data is to plot the data, or at least parts of it.

With datatool, that is as simple as this:

```python
from datatool import datatool

dt = datatool()
dt.load_csv('simpledata.csv')

# A basic line graph. 'X' and 'Y' are the column headers.
dt.line_graph('Y', 'X')

dt.display()
```

Let's examine the data:

- The CSV file looks like this:

    ```
    X,Y
    1,1
    2,2
    3,3
    4,5
    5,8
    6,13
    7,21
    8,34
    9,55
    10,89
    ```
    
    This is merely a list of points with x,y coordinates.

:::{.callout-caution appearance="simple" icon=false}
### Exercise 1.15

In `my_plot_example.py`, plot 'X' against 'Y' to get 
![](../../../media/units/unit2/module2.1/linegraph_ex.png)
:::

:::{.callout-tip}
**Mac Users**: Don't forget to have Firefox running before you run the program.
:::

One can plot <em>categorical</em> (non-numeric) data as well:
```python
from datatool import datatool

dt = datatool()
dt.load_csv('cities.csv')

dt.line_graph('city', 'population')

dt.display()
```

:::{.callout-caution appearance="simple" icon=false}
### Exercise 1.16

Type up the above in `my_plot_example2.py` to observe a decidedly nonlinear relationship between city rank and population.
:::

It is possible to depict multiple curves on one plot:

- Consider this data set: <a href="../../../media/units/unit2/module2.1/simpledata2.csv">**simpledata2.csv**</a>,

    ```
    X,Y,Z,W
    1,1,89,88
    2,2,55,53
    3,3,34,31
    4,5,21,16
    5,8,13,5
    6,13,8,5
    7,21,5,16
    8,34,3,31
    9,55,2,53
    10,89,1,88
    ```

- Here, there are four columns.
- We will plot the 2nd, 3rd, and 4th columns against the 1st:
  
    ```python
    from datatool import datatool

    dt = datatool()

    dt.load_csv('simpledata2.csv')

    # Note: how to place a title on a graph:
    dt.set_title('X vs Y, W, Z')

    dt.line_graph('X', 'Y')
    dt.line_graph('X', 'Z')
    dt.line_graph('X', 'W')

    dt.display()
    ```

:::{.callout-tip}
When **Plotly** (via _datatool_) displays in the browser, there are additional controls included, such as _zoom in/out_:
![](../../../media/units/unit2/module2.1/plotly.png)
:::

Next, let's use datatool to plot a bar chart:
```python
from datatool import datatool

dt = datatool()

dt.load_csv('simpledata2.csv')

dt.bar_chart('X', 'Y')
dt.bar_chart('X', 'Z')

dt.display()
```

Which produces
![](../../../media/units/unit2/module2.1/barchart.png)

:::{.callout-caution appearance="simple" icon=false}
### Exercise 1.17

In `my_plot_example2.py`, use the **cities.csv** data to plot a bar chart of city populations as in 
![](../../../media/units/unit2/module2.1/barchart_ex.png)
:::

Next up: bubble charts
```python
from datatool import datatool

dt = datatool()

dt.load_csv('simpledata2.csv')

dt.bubble_chart('X', 'Y', bubblesize='Y')

dt.display()
```
Which produces
![](../../../media/units/unit2/module2.1/bubblechart.png)

:::{.callout-note}
- We need to tell datatool which column to use for the size of the bubbles.
- It is possible to use one column for the center of each bubble (as if plotting points) and another for bubble sizes.
:::

:::{.callout-caution appearance="simple" icon=false}
### Exercise 1.18

In `my_plot_example4.py`, use the **cities.csv** dataset to plot a bubble chart of city populations as in:
![](../../../media/units/unit2/module2.1/bubblechart_ex.png)
:::

## 1.11 Using datatool for drawing
Datatool as drawing functions similar to drawtool:

```python
from datatool import datatool

dt = datatool()

# Set the range along each axis:
dt.set_x_range(0, 10)
dt.set_y_range(0, 10) 

# Set line width:
dt.set_draw_width(2)

# Draw some lines and shapes
dt.set_draw_color('blue')
dt.draw_line(2,3, 8,9)
dt.set_draw_color('green')
dt.draw_rectangle(7,2, 3,4)
dt.draw_ellipse(7,2, 3,4)
dt.set_draw_color('red')
dt.draw_arrow(3,8, 5,7, 5, 2)

# Draw text 
dt.draw_text(8.5, 4, 'Bullseye')

dt.display()
```

Which produces
![](../../../media/units/unit2/module2.1/drawing.png)

## 1.12 Using datatool with generated data
In some situations, we end up <em>generating data</em> with our code. This means the data is not in some CSV file.

For example, suppose we want to plot the numbers 0 through 10 and their squares using:
```python
for i in range(11):
    x = i
    y = x * x        # The square of x

# We'd like to plot these x,y values as points in a graph
```

There are two options:

- Create a CSV from the above program, and then load that into datatool.
- Avoid creating a file and directly feed the data into datatool.

Let's use the latter approach since it avoids having to create a file.

```python
from datatool import datatool
import numpy as np

dt = datatool()

# Make an empty array with zeroes (dtype='f' means float numbers)
# Other kinds are 'int'
A = np.zeros( (11, 2), dtype='f')

# Now fill the array with generated data:
for i in range(11):
    x = i
    y = x * x
    A[i,0] = x     # First col has x
    A[i,1] = y     # Second has y

# We now want to plot the second column in A against the first

# Hand the array over to datatool, specifying column names:
dt.set_data_from_array(A, col_headers=['X','Y'])

dt.line_graph('X', 'Y')

dt.display()
```

Which produces
![](../../../media/units/unit2/module2.1/generated.png)

:::{.callout-note}
- Notice how we ask Numpy to create an array of the right size:
  
    ```python
    A = np.zeros( <b>(11, 2)</b>, dtype='f')
    ```
    That is, <b>11</b> rows for the numbers 0 through 10 and <b>2</b> columns for the x,y values.
- Notice that <b>(11, 2)</b> is specified as a <em>tuple</em>. 
    <br>(Recall tuples from Module 1 of this unit.)
- The array A now has 11 rows and 2 columns, with each entry set to 0.
- After that, we fill in the values we generate:
  
    ```python
    for i in range(11):
        x = i
        y = x * x
        A[i,0] = x  
        A[i,1] = y  
    ```
- Which we could shorten to:
  
    ```python
    A[i,0] = i  
    A[i,1] = i * i  
    ```
- The CSV equivalent (which we don't need here) would look like this:
  
    ```
    0,0
    1,1
    2,4
    3,9
    4,16
    5,25
    6,36
    7,49
    8,64
    9,81
    10,100
    ```
:::

## 1.13 Using datatool for maps
One of the more exciting uses of Plotly is to display maps and draw on them.

Let's think about what a map really is:

- Whereas a standard 2D plot depicts an x-axis and a y-axis, a map could be a region of the globe or the whole globe forced into 2D depiction (sometimes awkwardly).
- The coordinate system uses <em>angles</em> called <em>latitudes</em> and <em>longitudes</em>.

There are fundamentally two types of <em>digital maps</em>:

- A <em>vector map</em> or <em>line map</em> is a collection of lines and other such geometric entities which, if drawn like lines typically are, will show a map.
    - A vector map is most often a very basic map with simple lines for boundaries.
    - Vector maps are efficient because it doesn't take much storage space to store lines (you only need the coordinates of the end points of each line).
- A <em>tile map</em> is really a collection of tiles put together to form a map:
    - An individual tile can itself be an image (as in a 'satellite view') or a combination of image and geometric objects.
    - Tilemaps generally look nicer because tiles can be pre-built with accurate and rich detail.
    - However, detailed tiles can be slow to load, as you've no doubt notice when zooming quickly with Google-maps.

Because of these and other differences, map drawing can sometimes be confusing.
  
Let's look at an example of a simple line-map:

```python
from datatool import datatool

dt = datatool()

dt.load_csv('cities.csv')

# We need to specify which columns of cities.csv have
# the latitude and longitude, respectively.
dt.linemap('lat', 'long')

dt.display()
```

:::{.callout-caution appearance="simple" icon=false}
### Exercise 1.19

You already have **cities.csv**. Type up the above in `my_linemap_example.py` and confirm that you see
![](../../../media/units/unit2/module2.1/linemap.png)
:::

:::{.callout-note}
- You need to be connected to the internet because datatool downloads map data from certain websites.
- You may see an "**Aa**" legend by the side, depending on which version of **Plotly** was installed by _Anaconda_.
- The CSV file looks like this;
  
    ```
    city,lat,long,country,iso2,iso3,population
    Tokyo,35.6897,139.6922,Japan,JP,JPN,37977000
    Jakarta,-6.2146,106.8451,Indonesia,ID,IDN,34540000
    Delhi,28.66,77.23,India,IN,IND,29617000
    Mumbai,18.9667,72.8333,India,IN,IND,23355000
    Manila,14.5958,120.9772,Philippines,PH,PHL,23088000
    Shanghai,31.1667,121.4667,China,CN,CHN,22120000
    Sao Paulo,-23.5504,-46.6339,Brazil,BR,BRA,22046000
    Seoul,37.5833,127.0,"Korea, South",KR,KOR,21794000
    Mexico City,19.4333,-99.1333,Mexico,MX,MEX,20996000
    Guangzhou,23.1288,113.259,China,CN,CHN,20902000
    ```
- The columns that have the latitude and longitude happen to be called `lat` and `long`.
- Which is what we need to tell datatool:
  
    ```python
    dt.linemap(<b>'lat', 'long'</b>)
    ```
    Datatool then (via Plotly) draws a world map as default with one red dot per latitude-longitude pair extracted from those columns.
:::

Next, let's label the cities and draw a line:
```python
from datatool import datatool

dt = datatool()

dt.load_csv('cities.csv')

dt.linemap('lat', 'long', 'city')

# This needs to come <b>after</b> the linemap() function call.
dt.linemap_add_line(-23.5504,-46.6339, 19.4333,-99.1333)

dt.display()
```

:::{.callout-caution appearance="simple" icon=false}
### Exercise 1.20

Type up the above in `my_linemap_example2.py`and confirm that you see
![](../../../media/units/unit2/module2.1/linemap2.png)
:::

:::{.callout-note}
The city labels are crowded and overwrite each other in places. In general, map labeling is a challenging issue.
:::

There is a more detailed version of linemap drawing that allows one to set the size of labels (markers), create "hover" text, and so on:
```python
dt.linemap_detailed(
    'lat', 
    'long', 
    marker_color='Red', 
    marker_size=10, 
    marker_text='city', 
    marker_text_size=9, 
    hovertext=['city', 'population'], 
    showlegend=False)
```

## 1.14 Choropleth maps
A <a href="https://en.wikipedia.org/wiki/Choropleth_map#:~:text=A%20choropleth%20map%20(from%20Greek,each%20area%2C%20such%20as%20population">**choropleth map**</a> shows regions in colors that imply a quantity associated with a region.

Datatool displays choropleths using linemaps.

For example, let's show country populations from our running example in a choropleth map:
```python
from datatool import datatool

dt = datatool()

dt.load_csv('2011_population.csv')

# Changes the colorscale of the choropleth_iso3()
dt.set_color_scale('rainbow')
# More choices here: https://plotly.com/python/builtin-colorscales/

# The choropleth_iso3() function uses a standard code for countries.
# The second parameter describes which column to use for heat-map
# like coloring. The third is what to show when the mouse hovers.
dt.choropleth_iso3('countrycode', 'pop', 'country')

dt.display()
```
Which produces:
![](../../../media/units/unit2/module2.1/choropleth.png)

## 1.15 Using datatool for maps: tilemaps
Let's look at our 10 cities using a tilemap:
```python
from datatool import datatool

dt = datatool()

dt.load_csv('cities.csv')

# The first two identify the lat/long columns. The third
# is the column with the data to be drawn.
dt.tilemap_attach_col_lat_long('lat', 'long', 'city')

dt.tilemap()

dt.display()
```

:::{.callout-note}
- For tilemaps, we <em>first</em> need to identify the columns that have the latitudes and longitudes, along with the "data" column. 
- The data column has the strings that we want shown at those latitudes and longitudes.
:::

:::{.callout-caution appearance="simple" icon=false}
### Exercise 1.21

Type up the above in `my_tilemap_example.py` and confirm that you see
![](../../../media/units/unit2/module2.1/tilemap.png)
:::

Now let's draw a line between two cities:
```python
from datatool import datatool

dt = datatool()

dt.load_csv('cities.csv')

dt.tilemap_attach_col_lat_long('lat', 'long', 'city')

# For tilemaps, line drawing must <b>precede</b> the call to tilemap.
dt.tilemap_add_line(-23.5504,-46.6339, 19.4333,-99.1333)

dt.tilemap()

dt.display()
```

:::{.callout-caution appearance="simple" icon=false}
### Exercise 1.22

Type up the above in `my_tilemap_example2.py` and confirm that you see
![](../../../media/units/unit2/module2.1/tilemap2.png)
:::

The above shows the full world map centered at latitude 0, longitude 0.

A more detailed version of the tilemap function allows you to set the zoom and center, among other items:
```python
dt.tilemap_attach_col_lat_long('lat', 'long', 'city')

# Define a different center:
c = dict(lat = 30, lon = 120)

# The detailed version specifies hover data, the center, a zoom level
dt.tilemap_detailed(hover_name='city', hover_data=['city'], center=c, zoom=2, title='Some cities')
```

There is also an intermediate-detail version with just center, zoom and title:
```python
dt.tilemap_attach_col_lat_long('lat', 'long', 'city')

c = dict(lat = 30, lon = 120)

# Intermediate-detail: center, zoom, title:
dt.tilemap_czt(center=c, zoom=2, title='Some cities')
```

Finally, let's look at an example with street maps, where tilemaps really stand out:
```python
from datatool import datatool

dt = datatool()

dt.load_csv('parkingtickets_June2020.csv')

dt.tilemap_attach_col_lat_long('LATITUDE', 'LONGITUDE', 'FINE_AMOUNT')

# DC's lat/long:
dc_latlong = dict(lat = 38.92, lon = -77.07)

dt.tilemap_detailed(
    hover_name='LOCATION', 
    hover_data=['VIOLATION_PROC_DESC'],
    center=dc_latlong, 
    zoom=11, 
    title='DC Parking Violations June 2020')

dt.display()
```

:::{.callout-caution appearance="simple" icon=false}
### Exercise 1.23

Download <a href="../../../media/units/unit2/module2.1/parkingtickets_June2020.csv" download>**parkingtickets_June2020.csv**</a> and type up the above in  `my_tilemap_example3.py` Run and confirm that you see:
![](../../../media/units/unit2/module2.1/tilemap3.png)
:::

</body>
</html>