---
title: "**Assignment 0:** Problem Solving Example"
format:
  html:
    code-copy: false
---

<html>
<head>
    <style>
        body {
            -webkit-user-select: none; /* Safari */
            -moz-user-select: none; /* Firefox */
            -ms-user-select: none; /* IE10+/Edge */
            user-select: none; /* Standard */
        }
    </style>
</head>
<body>

<!-- <div class="breadcrumbs">
  <a href="../../../index.qmd">Home</a> &raquo;
  <a href="">Unit 0</a> &raquo;
  <a href="./assignment1.qmd">Assignment 1</a> &raquo;
  <span class="current-page">Problem Solving</span>
</div> -->

::: {.callout-important}
- You are here to solve the demo problem only. 
- Once you are done with this demo problem you need to go back tothe remaning problems in `assignment0`, found [here](assignment0.qmd) and complete them.
:::

With a challenging problem, what is often hardest is getting started. Where to begin?


Let's start by examining the output more closely:
<!-- ![](../../../media/units/unit0/assignment1/arrowhead.png) -->
![](../../../media/units/unit0/assignment0/arrowhead.png)

Let's try to get the top half of the arrowhead first:

- At first, let's not worry about the details of the start/end of loops.
- As a "sketch" (not real code) we could write:
    
    ```python
    for i in range(... to be determined ...):
        # Print i *'
    ```
- Next, examine the problem of printing i asterisks on a single line.
- If we just had print, say, 7 asterisks on a line, could we write a for-loop to do that?
- Does this sketch work?
    
    ```python
    for j in range(... something to do with 7 ...):
        print('*')
    ```
- Now let's work out the range: we want to run from either 1 through 7 (inclusive) or from 0 through 6.
- Suppose we pick the 0 through 6 option and write:
    
    ```python
    for j in range(0,7):
        print('*')
    ```
- At this point we can try this and see what it does.

:::{.callout-caution appearance="simple" icon=false}
###### <span style="color:#8B4513;">**A0.1.1 Exercise:**</span>
Write up the above in `my_demo_problem1.py` and save it. 

At this stage, we should assess the output generated and proceed toward improving our program.
:::
- Now let's generalize to printing a single line of i asterisks:
 
    ```python
    for j in range(0,i):
        print('*', end='')
    ```
- Next, we can use this as our inner loop in the overall top-half sketch:
    
    ```python
    for i in range(... to be determined ...):
        # Print i *'s
        for j in range(0,i):
            print('*', end='')
    ```
- Now let's determine the range of i (which we might get wrong the first try, but can fix easily).
- We sense that the limit is 10. Could the following work?
    
    ```python
    for i in range(1, 10):
        # Print i *'s
        for j in range(0,i):
            print('*', end='')
    ```

:::{.callout-caution appearance="simple" icon=false}
###### <span style="color:#8B4513;">**A0.1.2 Exercise:**</span>
Write up the above in `my_demo_problem2.py` and save it. 

Something does not look correct at this stage. However, we are building up our code in stages and should think about how to correct it and proceed further. 
<!--  Explain in your `assignment1.pdf`. -->
:::
- Let's fix the issue. We need to get to a new line every time the inner loop completes.
- Does this work?

    ```python
    for i in range(1, 10):
        # Print i *'s
        for j in range(0,i):
            print('*', end='')
            print()
    ```


:::{.callout-caution appearance="simple" icon=false}
###### <span style="color:#8B4513;">**A0.1.3 Exercise:**</span>
Write up the above in `my_demo_problem3.py` and save it. 

Again, we can assess from the output that something does not look correct at this stage. However, we can assess what went wrong and proceed toward correcting it in  stages.
:::
- Next, we'll fix and write:
    
    ```python
    for i in range(1, 10):
        # Print i *'s
        for j in range(0,i):
            print('*', end='')
        print()
    ```

- Does this work?

The output generated looks promising but is not correct. Count the number of rows in the output. 

- At this stage let's determine how we can proceed toward correcting it.
 
    ```python
    for i in range(1, 11):
        # Print i *'s
        for j in range(0,i):
            print('*', end='')
        print()
    ```
- We now have the solution to the top half:

:::{.callout-caution appearance="simple" icon=false}
###### <span style="color:#8B4513;">**A0.1.4 Exercise:**</span>
Write up the above in `my_demo_problem4.py` and save it. 

We are only half way through in completing this program. We made good progress and now are ready for the next stage.
:::

Next, let's tackle the bottom half:

- Again, we see that each particular line prints a number of *'s.
- As long as we can figure out <em>how many</em> are needed in each line, we can reduce each line by 1.
- That suggests an outer loop that starts big and grows small.
- Let's sketch this out as:
    
    ```python
    # Code for top half here ...

    # Code for bottom half:
    for i in range(... to be determined ...):
        # Print i *'
    ```
- But we already know how to print i *'s because we solved that in the top half:
    
    ```python
    # Code for top half here ...

    # Code for bottom half:
    for i in range(... to be determined ...):
        # Print i *'
        for j in range(0,i):
            print('*', end='')
        print()
    ```
- So all that's left is to determine the range of i so that it starts at 10 and goes down to 1.
- Since going down in a range requires a negative step, we could write something like
    
    ```python
    for i in range(10, 1, -1):
    ```
- Clearly, we want to start at 10. But should the range end with 1 or 0? We'll leave this unanswered for now.
- Let's put it all together:
    
    ```python
    # Code for top half:
    for i in range(1, 11):
        for j in range(0, i):
            print('*', end='')
        print()

    # Code for bottom half:
    for i in range(10, 1, -1):
        for j in range(0, i):
            print('*', end='')
        print()
    ```

:::{.callout-caution appearance="simple" icon=false}
###### <span style="color:#8B4513;">**A0.1.5 Exercise:**</span>
Write up the above in `my_demo_problem5.py`. Did it work? Look closely at your output. Figure out how to fix the code.
:::

:::{.callout-caution appearance="simple" icon=false}
###### <span style="color:#8B4513;">**A0.1.6 Exercise:**</span>
Once you've fixed the code, submit your final version in `my_arrowhead.py`.
:::

:::{.callout-note}
### If you got this far successfully, congratulations!
- Remember: You are saving all the programs in a directory called `assignment0`.
- You need to start addressing the remaning problems in `assignment0`, found [here](assignment0.qmd).
- After completing the remaining problems in this assignment, make a `zip` of the directory as `assignment0.zip` and submit it.
:::
</body>
</html>