---
title: "**Assignment 1:** Problem Solving Example"
format:
  html:
    code-copy: false
---

<html>
<head>
    <style>
        body {
            -webkit-user-select: none; /* Safari */
            -moz-user-select: none; /* Firefox */
            -ms-user-select: none; /* IE10+/Edge */
            user-select: none; /* Standard */
        }
    </style>
</head>
<body>

<!-- <div class="breadcrumbs">
  <a href="../../../index.qmd">Home</a> &raquo;
  <a href="">Unit 0</a> &raquo;
  <a href="./assignment1.qmd">Assignment 2</a> &raquo;
  <span class="current-page">Problem Solving</span>
</div> -->

With a challenging problem, what is often hardest is getting started. Where to begin?

Let's start by examining the output more closely:
![](../../../media/units/unit0/assignment1/Assignment1_DemoPic1.png)

At this point, it's important NOT to think about coding details.

This is a critically useful strategy that deserves some explanation:

- The type of thinking you do when solving a problem at the higher level is different from the kind of nitpicky-language-level detail during coding.
- Experience shows that it's best to avoid doing both simultaneously.
- If you like analogies:
    - It's best to develop an outline of an essay before focusing on sentences.
    - Do the prep (chopping, organizing) before the actual cooking.

So now, let's just think high level but a little code-like:

- We call this <em>algorithmic thinking</em>.
- Since there are 10 lines, we could say "we're doing something 10 times" (each time slightly differently).
- In code-like structure, called <em>pseudocode</em>:
  
    ```python
    for i going from 1 to 10
        figure out and print the i-th line
    ```
- It's worth staring at the above for a few minutes. We'll point out that:
    - This is NOT actual code but puts structure to the thought "we're doing something 10 times"
    - The high level structure will later become an actual for-loop.
    - Pseudocode doesn't get hung up on language minutiae like semi-colons.
      All it needs to do is outline the main idea, like a sketch.


Next, if we could somehow figure out the last letter in each line, we'd be in good shape, because:
```python
for i going from 1 to 10
    figure out the last letter in line i
    print from z down to that last letter
```

We need to figure out the last letter in the i-th line:

- One problem: i is an integer.
- But ... recall the connection between integers and characters?
- To go from letter to number:
    
    ```python
    k = ord('a')       # k will turn out to be 97
    ```
- To go from number to letter:
    
    ```python
    letter = chr(97)   # letter will turn out to be 'a'
    ```
- So, now let's ask: how do we get the letter that's i spots behind 'z' in the alphabet?
    - Let's first get the <em>number</em> (integer) corresponding to the letter 'z'
    
        ```python
        k = ord('z')
        ```
    - So, the <em>number</em> corresponding to the letter that's i spots behind 'z' must be
        
        ```python
        k = ord('z')
        j = k - i       # i spots behind (or less)
        ```
    - This might be easier to see in a picture:
    ![](../../../media/units/unit0/assignment1/Assignment1_DemoPic2.png)
    - Let's convert that to a letter:

        ```python
        k = ord('z')
        j = k - i
        letter = chr(j) # the letter i spots behind
        ```
    - This can be printed.

Let's summarize what we have so far in pseudocode:
```python
for i going from 1 to 10
    k = ord('z')
    # the number of the letter i spots behind
    j = k - i
    Now print all the letters corresponding to the numbers from k to j
```

- Clearly, we want to print every letter corresponding to the numbers between k and j.
- This means an inner for-loop because we're iterating from k to j.
- Observe that j is smaller than k and so we have to <em>decrement</em> in this inner for-loop.
- Thus, we can revise our pseudocode as:

    ```python
    for i going from 1 to 10
        k = ord('z')
        # the number of the letter i spots behind
        j = k - i
        for n starting at k and going down to j
            get the letter corresponding to n and print it
    ```
- Finally, let's try and fill in the missing pieces:

    ```python
    for i in range(1, 10):
        k = ord('z')
        j = k - i
        for n in range(k, j, -1):
            c = chr(n)
            print(c)
    ```

:::{.callout-caution appearance="simple" icon="false"}
###### <span style="color:#8B4513;">**A2.1 Exercise:** </span>

Write up the above in `my_char_problem1.py`. The output does not match what the desired output as shown [here](../../../media/units/unit0/assignment1/Assignment1_DemoPic1.png). However, type up the program and submit it.
:::

:::{.callout-caution appearance="simple" icon="false"}
###### <span style="color:#8B4513;">**A2.2 Exercise:** </span>
Some unaddressed problems were deliberately left in the program above. Write a program `my_char_problem2.py` to fix the problems in the program above. This program should build on the previously saved program and match the desired output shown [here](../../../media/units/unit0/assignment1/Assignment1_DemoPic1.png).  Submit `my_char_problem2.py`.
:::

:::{.callout-warning}
You will be submitting the following two programs in this assignment exercise: 

1. `my_char_problem1.py`
2. `my_char_problem2.py`
:::

:::{.callout-note}
### If you got this far successfully, congratulations!
- Remember: You are saving all the programs in a directory called `assignment1`.
- You need to start addressing the remaning problems in `assignment1`, found [here](assignment1.qmd).
- After completing the remaining problems in this assignment, make a `zip` of the directory as `assignment1.zip` and submit it.
:::

</body>
</html>