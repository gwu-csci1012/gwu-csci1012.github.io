[
  {
    "objectID": "submit-remember.html",
    "href": "submit-remember.html",
    "title": "What to remember about submitting work",
    "section": "",
    "text": "The submission requirements are stringent. You MUST name folders and files exactly as described.\nIn particular: be careful to avoid spaces where they shouldn’t be spaces, and to use lowercase when asked. For example:\n\nmodule0.pdf (correct)\nModule0.pdf (wrong: starts with uppercase)\nmodule 0.pdf (wrong: space before 0)\nmodule0.docx (wrong: not a pdf).\n\nYour programs must do what’s asked, no less no more. If you print more than what’s required the autograder will not grade your program.\n\nIf you’ve forgotten how to make folders, zip files etc, now may be a good time to review your computerese skills\n\n\nYou will be submitting your PDF files TWICE, once inside the zip file and once separately in Blackboard."
  },
  {
    "objectID": "submit-remember.html#most-important",
    "href": "submit-remember.html#most-important",
    "title": "What to remember about submitting work",
    "section": "",
    "text": "The submission requirements are stringent. You MUST name folders and files exactly as described.\nIn particular: be careful to avoid spaces where they shouldn’t be spaces, and to use lowercase when asked. For example:\n\nmodule0.pdf (correct)\nModule0.pdf (wrong: starts with uppercase)\nmodule 0.pdf (wrong: space before 0)\nmodule0.docx (wrong: not a pdf).\n\nYour programs must do what’s asked, no less no more. If you print more than what’s required the autograder will not grade your program.\n\nIf you’ve forgotten how to make folders, zip files etc, now may be a good time to review your computerese skills\n\n\nYou will be submitting your PDF files TWICE, once inside the zip file and once separately in Blackboard."
  },
  {
    "objectID": "submit-remember.html#correct-folder-structure-on-your-laptop",
    "href": "submit-remember.html#correct-folder-structure-on-your-laptop",
    "title": "What to remember about submitting work",
    "section": "Correct folder structure on your laptop",
    "text": "Correct folder structure on your laptop\nFor the overall class you should have a folder named cs1012 on your computer:\n\nYou can create one such folder on your Desktop, but you could also place this inside some other folder.\n\n\n\n\n\n\n\nWarning\n\n\n\nIt’s all lowercase, with no spaces.\n\n\nIn the cs1012 folder, create a folder for each unit. Eventually, you will create a folder for each unit and each module in a given unit.\nYou must name your folders with the following rules:\n\nThere will be 3 units, so you will ultimately have folders called unit0, unit1 and unit2 inside your cs1012 folder.\nName the unit folders carefully:\n\nFor your Unit 0 work, name that unit’s folder unit0.\nFor your Unit 1 work, name that unit’s folder unit1.\nFor your Unit 2 work, name that unit’s folder unit2.\n\nEach unit has several modules. For each module folder inside the each unit folder, you must name the module folder according to these rules: Each unit has several modules. For each module folder inside the each unit folder, you must name the module folder according to these rules:\n\nFor your Module 0 work, name that module’s folder module0.\nFor your Module 1 work, name that module’s folder module1.\nAnd so on.\n\nEach unit has will also have assignments. For each assignment inside each unit, make a folder. You must name the assignment folders according to these rules:\n\nFor your Assignment 1 work, name that folder assignment1.\nFor your Assignment 2 work, name that folder assignment2.\nAnd so on if there are more assignments.\n\nThus, one looks inside your 1012 folder, we’d expect to see three sub-folders called unit0, unit1, and unit2.\nAnd, if one further looks inside the unit0 folder, we’d expect to see 9 sub-folders:\n\n7 of these will be called module0, module1, module2, module3, module4, module5 and module6\n2 of these will be called assignment1 and assignment2."
  },
  {
    "objectID": "submit-remember.html#correct-location-and-naming-of-files-within-folders",
    "href": "submit-remember.html#correct-location-and-naming-of-files-within-folders",
    "title": "What to remember about submitting work",
    "section": "Correct location and naming of files within folders",
    "text": "Correct location and naming of files within folders\nEvery module and every assignment will feature multiple files:\n\nMost files will be Python programs. The names of these will end in .py.\nFor example: myname.py.\nAnother example from Module 0 in Unit 0: In Exercise 0.4, you are instructed to create the files error1.py and error2.py. These need to be saved in your module0 folder when using your code editor (Thonny or Spyder).\nEvery module will also have a single PDF file with the same first-part named as the module name. For example: you will make a file called module0.pdf in your module0 folder.\nWhen is the PDF file to be used? The single PDF (one per module) is used when you are to write responses outside of Python code. For example:\n\nIn Module 0, you are asked to submit a picture and write (in English) something about yourself. You can write in Word, and save to a PDF file called module0.pdf in your module0 folder.\nIn Exercise 1.11 of Module 1, you are asked to describe an error. You will describe (in plain English) by writing in module1.pdf. Similarly, Exercise 1.8 asks you to describe the output of a program. Copy-paste the output from Thonny/Spyder into module1.pdf. Make sure module1.pdf is saved to in your module1folder."
  },
  {
    "objectID": "submit-remember.html#making-a-zip-to-submit",
    "href": "submit-remember.html#making-a-zip-to-submit",
    "title": "What to remember about submitting work",
    "section": "Making a zip to submit",
    "text": "Making a zip to submit\nWhen you zip your files when preparing to submit them, you must zip only the files for the current module and you must name the zip file for the corresponding folder.\n\nThe easy way to do this is to zip the folder containing the files.\n\nFor example, for Unit 0 : Module 1, you must zip the module1 folder that is inside the unit0 folder. Since this folder will contain the module1.pdf file, it will get included in the zip file.\nWhen it’s time to submit, you will upload this zip file (example: module1.zip) into the appropriate place in Blackboard."
  },
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": "FAQ",
    "section": "",
    "text": "About this site\n\n\n\n Back to top"
  },
  {
    "objectID": "units/unit0/modules/module0.html",
    "href": "units/unit0/modules/module0.html",
    "title": "Module 0: Your First Program",
    "section": "",
    "text": "Home » Units » Module 0"
  },
  {
    "objectID": "units/unit0/modules/module0.html#objectives",
    "href": "units/unit0/modules/module0.html#objectives",
    "title": "Module 0: Your First Program",
    "section": "Objectives",
    "text": "Objectives\nBy the end of this module you will be able to:\n\nExperince writing a really simple program.\nExplain the difference between command-line outputs vs GUI for programs.\n\n\n0.0: Our First Program\nLets take a look at our first program as it appears in a textbook (like this one):\nprint(\"Hello World\")\nThis is a simple program written in the Python programming language, possibly one of the smallest programs one can write, and a traditional starting point for learning programming.\nWe will very soon (below) write this program ourselves.\nFor now, let’s point out a few things:\n\nWhat we see above is the text of the program. \nThe entire program will appear inside of a code editor when we write.\nWe could use one of several code editors.\nFor example, this is how it would look inside the Spyder code editor: \nAnd how it might look in the Thonny code editor: \nVarious editors colorize in different ways for convenience of reading, none of which affect the actual text of the program.\nApart from typing it in (which you’ll do shortly), we haven’t actually run the program.\nIntuitively, just looking at the program we might think that:\n\nIt has to do with some kind of “printing” (because we see print)\nWe have no idea what is meant by the somewhat odd phrase “Hello World!”, but we see it there.\n\nThere are several ways to run a program:\n\nRun the program inside the very same editor used to type in the program.\nRun it without any editor (a slightly advanced topic).\n\nFor example, if we run the program using the Thonny editor, we will see this: \n\nNext, you will try this yourself.\n\n0.1 Excercise: Write and run the helloworld program using these instructions\nSo, what’s with printing the unusual phrase “Hello World!”?\n\nIt’s a tradition in computer science that your first program will print “Hello World!”.\nIt’s meant to pretend that a program is a creature that’s itself communicating to the outside world by saying hello.\n\n\n\n\n0.1 The recipe-cook-dish analogy\nWhat just happened above?\nLet’s use an analogy \n\nA recipe is a bunch of instructions in text form.       ⇒ A program is also a set of instructions in text form.\nBy itself, a recipe doesn’t do anything until it’s acted on.       ⇒ You can type up a program but not do anything with it (i.e., not run it).\nA cook executes a recipe by following the instructions       ⇒ A combination of elements in your laptop executes a program.\nThe net result of a cook executing a recipe is, typically, a dish.       ⇒ The result of executing a program is the program’s output\nWe of course design and write up programs to get useful or interesting output.\nWhen a recipe is poorly written, or if the cook messes up, the result may be failure.       ⇒ A program and the laptop are even more exacting: the slightest error can result in failure.\n\n\n\n0.2 Programming vs. computerese\nWhat we mean by computerese:\n\nThe computer-related tasks and knowledge that are needed, but not the intellectual core of programming.\nWe use the term slightly pejoratively, like legalese.       ⇒ A necessary evil.\nExamples of computerese:\n\nNavigating directories\nLocating files, copying them, moving them.\nMastery of editor keys, shortcuts.\nHandling the quirks of an operating system.\nUploading files to a website, downloading.\n\n\n\n0.2 Excercise: Develop your computerese skills by following these instructions.\n\n\n\n\n\n\n\nNote\n\n\n\nThere is nothing to submit for this particula exercise; it is aimed at generally helping you get proficien with using your computer for programming.\n\n\n\n\n\n0.3 A slight variation\nWe will now spend a bit of time trying a few variations, and also examining what happens when typing mistakes are made.\nConsider this program: \nprint('Hello World!')\nprint('My name is X')\n\n0.3 Excercise: Type up this program but use your own name instead of X. Save the file in the module0 folder as myname.py.\n\n\n\n\n\n\nNote\n\n\n\nIn the future we will be asking you to “type up” programs; in all such cases, please also save the file (for eventual submission)\n\n\n\n\n\n0.4 What happens when things go (even slightly) wrong\nWe’ll now deliberately make a few tiny errors and see what happens:\n\nError #1: forgetting to type the closing parenthesis.\n\nHere’s the program:\n\nprint('Hello World!'\nNote the missing right parenthesis at the end of the line.\n\nWhat happens when we nonetheless try and run the program?\n\nHere’s an example with the Thonny editor: \n\nError #2: What happens if we forget the quotation marks?\n\nHere’s the program:\n\nprint(Hello World!)\n\nWe get something quite similar: \n\n\n\n0.4 Excercise: Confirm that you get the errors above by typing up the two programs as error1.py and save the programs in the module0 folder.\n\n\n\n0.5 A peek at a more complex program\nJust to see what’s coming later, let’s get a sense of what a more complex program looks like.\nYour goal is to look through it with bemused curiosity, as if studying an incomprensible work of abstract art.\nWe’ll just examine the some surface features, as we would when examining some undeciphered ancient script such as: \nLet’s start by running the program.\n\n0.5 Excercise: Download whackamole.py into your module0.py folder Then open it and run it. You should see\n The purpose of the program and how you use it should be easy to figure out.\nLet’s point out a few things:\n\nUnlike the toy helloworld.py example, this program actually does something nontrivial.\nThe program brings up a window, and allows a user to interact with it (the program).\n\nNow let’s list the program and then point out some “surface” features.\nThe full program:\n# whackamole with nerf gun\n\n# Use programs written by others through \"import\"\nimport tkinter as tk  \n\n# Define a window\nwindow = tk.Tk()\n\n# The instructions at the top\ninstructions = 'Click reset, then click fire to strike the mole'\nlabel = tk.Label(text=instructions)\nlabel.pack()\n\n# Build a rectangular space on which to draw \n# shapes like circles\nw = 300\nh = 200\ncanvas = tk.Canvas(master=window, width=w, height=h)\ncanvas.pack()\n\n# These are variables that control the \n# position of the target and nerf ball\ntargetX = 0\ntargetVX = 10\nnerfX = 0\nnerfY = h-10\nnerfVX = 20\nnerfVY = 0\nnerfAY = -3\ndelT = 0.1\nnerfFired = False\n\n\n# This is what we want to do when the \n# reset button is clicked:\ndef reset():\n    global nerfFired, targetX, nerfX, nerfY, nerfVY\n    nerfFired = False\n    targetX = 0\n    nerfX = 0\n    nerfY = h-1\n    nerfVY = 0\n    canvas.delete(\"all\")\n    print('reset')\n\n# When the fire button is clicked, we change \n# the status of the nerf gun\ndef fire():\n    # start launch\n    global nerfFired\n    nerfFired = True\n    print('fired')\n\n# Build the three buttons called \"reset\", \"fire\" and \"quit\"\nframe = tk.Frame(master=window)\nframe.pack()\n\nresetb = tk.Button(\n    master=frame, text=\"reset\", relief=tk.RIDGE, \n    fg='black', bg='grey', height=2, width=5,command=reset)\nresetb.grid(row=0, column=0)\n\nfireb = tk.Button(\n    master=frame, text=\"fire\", relief=tk.RIDGE, \n    fg='black', bg='grey', height=2, width=5, command=fire)\nfireb.grid(row=0, column=1)\n\nquitb = tk.Button(\n    master=frame, text=\"quit\", relief=tk.RIDGE, fg='black', \n    bg='grey', height=2, width=5, command=window.destroy)\nquitb.grid(row=0, column=2)\n\n# This part of the code draws and animates\ndef run():\n    global targetX, nerfX, nerfVY, nerfY\n    canvas.delete(\"all\")\n    targetX += targetVX * delT\n    canvas.create_rectangle(\n        targetX, h-10, targetX+10, h, fill=\"green\")\n    if nerfFired:\n        nerfX += nerfVX * delT\n        nerfVY += nerfAY * delT\n        nerfY += nerfVY * delT\n    canvas.create_oval(\n        nerfX+5,h-nerfY+5, nerfX+15, h-nerfY+15, \n        fill=\"red\")\n    window.after(1, run)\n\n# Launch the window and start the animation\nwindow.after(1, run)\nwindow.mainloop()\nYes, that’s a long program! Now let’s point out some features:\nFirst, some features from the first half of the program: \nAnd some from the latter part:And some from the latter part: \n\n\n\n0.6 GUI vs command-line\nGUI stands for: Graphical User Interface.\nAnd is pronounced like “gooey”.\nThe difference between GUI and command-line programs:\n\nPrograms like helloworld.py from earlier printed plain text. These are Command-line programs.\nPrograms like whackamole.py bring up their own little window on your screen. These are called GUI programs.\nGUI programs are typically more complicated because one has to specify all the elements (buttons etc) of the interface.\nWe will spend quite a bit of time learning programming with simpler (albeit less exciting) command-line programs.\nHowever, we will occasionally work with GUI programs because they are visually more interesting, and demonstrate applications.\n\n\n\n0.8 Computer science: beyond programming\nIs computer science the same as programming?\nNot at all:\nProgramming is certainly a significant part, just as narrative non-fiction is a significant part of an English degree.        ⇒ But there’s much more to it.\nWhat else does a computer science degree feature? Typically:\n\nProgramming devices (units 9-10).\nAn understanding of the hardware (units 11-12).\nAlgorithms: the science in computer science.\nTheory: understanding fundamental theoretical limitations of computation.\nA deeper understanding of how computer systems work: networks, databases, operating systems.\n\nBut also electives among (to name a few):\n\nArtificial intelligence, machine learning, robotics, computer vision, natural language processing.\nDesign of interfaces.\nGraphics, animation, visualization.\nDigital humanities, computing for arts and social sciences.\nScientific computing.\nComputational X, where X=biology, physics, economics …\nEducational tools, health data systems.\nMedical devices, prosthetics, control of mechanical systems\n\n\n\n0.8 How to succeed as a student\nThe challenge in learning programming:\n1: it’s an alien world.        ⇒ Takes getting used to.\n2: it’s a mental skill        ⇒ Skills are acquired slowly, with much practice, and in fits and starts.\n3: there are confounding issues        ⇒ some knowledge of (regrettably) computerese needed.\n4: it’s easy to feel overwhelmed or intimidated        ⇒ your neighbor may appear to be “getting it” while you feel you don’t.\nWhat you should expect:\n\nYou can’t learn instantly        ⇒ You may have to see a concept multiple times to “get it”.\nYou may occasionally feel bewildered.\nThere are some things that can’t be understoodat this stage.        ⇒ Not enough background.\nIt’s deceptively easy to understand an idea when reading or viewing but devilishly harder to do it yourself.\n\nHow to succeed:\n\nMake progress every day        ⇒ Each module builds on previous modules        ⇒ Can’t afford to let anything slide.\nBe willing to put the effort        ⇒ Do all exercises, assignments etc.\nPractice being irrepressibly positive.\n\n\n0.6 Excercise: Create a PDF file (using Word, Google-docs, or anything like that) called module0.pdf in your module0.pdf folder. This document should contain: (1) a picture that says something about you (it need not be a picture of you, it could represent something iconic for you.) (2) a paragraph about yourself.\n\n\n\n\n\n\nNote\n\n\n\nWhat to rememeber about submitting work"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CS 1012: Introduction to Programming with Python",
    "section": "",
    "text": "Welcome to the section of CS-1012!\nBecause this is an course, it will operate differently than a regular course. In particular:\n\nEven though the course is, we will meet three times: once at the beginning to get you going, once in the middle to check in, and once at the end for the in-class final exam.\nMost of our communication to you will be by email or by announcements in Blackboard.\nWhen you need to communicate with us, please follow the specific instructions outlined in Blackboard.\nWhen you submit work, please follow the specific instructions outlined in Blackboard for submitting work.\nThe coursework page outlines the schedule. It is YOUR job to keep to the schedule and submit work accordingly.\nAs you’ll see you’ll be accompanied by four students who will be doing the course with you. These four have no background in computer science or engineering whatsoever, demonstrating that anyone can learn CS with sufficient enthusiasm.\nStart by reading the About section. Then, await an email that will:\n\nSchedule the first meeting.\nDescribe the first homework to submit.\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "units/unit0/modules/module1.html",
    "href": "units/unit0/modules/module1.html",
    "title": "Module 1: A few more getting-started examples",
    "section": "",
    "text": "Home » Units » Module 1"
  },
  {
    "objectID": "units/unit0/modules/module1.html#objectives",
    "href": "units/unit0/modules/module1.html#objectives",
    "title": "Module 1: A few more getting-started examples",
    "section": "Objectives",
    "text": "Objectives\nBy the end of this module you will be able to:\n\nLearn what a comment is, and how to write them.\nWrite programs with multiple prints\nEscape sequences\nIdentify new syntactic elements.\nUnderstand case-sensitivity.\nWrite a function and examine proper indentation.\nFind and fix errors"
  },
  {
    "objectID": "units/unit0/modules/module1.html#comments",
    "href": "units/unit0/modules/module1.html#comments",
    "title": "Module 1: A few more getting-started examples",
    "section": "1.0 comments",
    "text": "1.0 comments\nA comment is like a note-to-self that you include directly in a program as a way to explain something to yourself for later, or to someone else who reads your program.\n# This is a comment\n      # This is one too, but not recommended \n\nprint('Something')      # And so is this\nLet’s explain:\n\nA comment begins with a and ends at the end of the line.\nAnything written as a comment is not treated by your computer as a “command” or as programming intent.\nThus, as far as programming goes, the above program is as good as:\n\nprint('Something')\n\nYou can insert comments in various places in a program: \n\n\n1.1 Excercise: Under your unit0, create a module1 folder (if you haven’t already), and then write up the above in my_comments.py. Fix the second comment to start at the beginning of the line, and add an entirely new comment line of your own.\nSometimes one needs a comment to spill over multiple lines, as in\n# I wrote this program at midnight\n20 seconds before the deadline\nprint('Something') \nNotice the missing # in the second line of the comment.\n\n\n1.2 Excercise: Write up the above in comment_error.py. Remember to save the file (and do this for every exercise in the future that involves a program). What is the error displayed when you try to run the program? Write the error in your module1.pdf file."
  },
  {
    "objectID": "units/unit0/modules/module1.html#whitespace",
    "href": "units/unit0/modules/module1.html#whitespace",
    "title": "Module 1: A few more getting-started examples",
    "section": "1.1 Whitespace",
    "text": "1.1 Whitespace\nConsider the following program:\nprint   (  'Hello World!'     ) \nNotice the spaces inserted in various places.\n\n1.3 Excercise: Write up the above in whitespace_example.py. Does the program run? Write your answer in module1.pdf file. Remember: if it’s not clear where to write your answer, write it in your module pdf (for this module that’s module1.pdf)\nConsider this variation\n  print('Hello World!')\n(Two spaces before print).\n\n\n1.4 Excercise: Write up the above in whitespace_example2.py. What is the error produced?\nFinally, look at:\nprint('Hello     World!') \n(Extra spaces between Hello and World.)\n\n\n1.5 Excercise: Write up the above in whitespace_example3.py. What is printed out? Write your answer in module1.pdf\nLet’s point out a few things:\n\nSome kinds of whitespace, even if ill-advised, is permitted.\nWhen starting a line of code, proper indentation is expected, which is why we got an error when we indented the line starting with print\nThe extra spaces between Hello and World are perfectly acceptable if the goal is to print them. Printing accepts whatever spaces you want printed."
  },
  {
    "objectID": "units/unit0/modules/module1.html#strings",
    "href": "units/unit0/modules/module1.html#strings",
    "title": "Module 1: A few more getting-started examples",
    "section": "1.2 Strings",
    "text": "1.2 Strings\nA string in Python is a sequence of letters, digits, or symbols (like $ or *) surrounded by either\n\nA pair of double quotes, as in: \"Hello World!\"\nA pair of single quotes as in: 'Hello World!'\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhichever quote you use to start a string must be used to end the string.\nThe ending quote must be on the same line as the starting quote.\nThere are special techniques to handle long strings that need to spill over multiple lines (which we’ll see below).\nThis raises some questions:\n\nIs it possible to print a single line but with multiple print statements?\nHow does one print a quote?\n\n\n\n\nFirst, note that we can use single or double quotes for different strings in the same program:\nprint('Hello')\nprint(\"World!\") \n\n1.6 Excercise: Confirm that Hello and World! get printed on two lines by writing the above in my_string_example.py\nA print statement prints the string within parenthesis and then goes to the next line of output, which is why we see World! on the next line.\nTo keep printing on the same line:\nprint('Hello', end=' ')\nprint('World!')\n\n\n\n\n\n\nNote\n\n\n\nWe’ve reverted to using single-quotes for all strings, which will be our preference.\n\n\n\n\n1.7 Excercise: Confirm by writing the above in my_string_example2.py.\nWe’ll now go the other way and have a single string itself contain a directive to spill over to the next line.\nprint('Hello\\nWorld!') \nNotice the backslash \\ followed by n inside the string: 'Hello&lt;b&gt;\\n&lt;/b&gt;World!'\n\n\n1.8 Excercise: Write up the above my_string_example3.py. What is the output? Write your answer in module1.pdf\nStrings can embed special so-called escape sequences that begin with backslash.\nThis will give us one way to print a quote:\nprint('My friend\\'s friend\\'s dog\\'s friend')\nAnother way is to use one set of quotes to delimit the string that are different from the ones used within:\nprint('My friend\\'s friend\\'s dog\\'s friend')\nprint(\"bit my friend's dog's ankle\")\nprint('who yelped \"owww\"')\nHow does one print a backslash itself? By using a double backslash:\nprint('The backslash character, \\\\, is less intimidating now')\n\n\n1.9 Excercise: Write a program called practice_escaping.py that prints out\n  \"    \"   \\\\\\\n  \"    \"    \\    \n  \"\"\"\"\"\"    \\    \n  \"    \"    \\    \n  \"    \"   \\\\\\  \n\n\n1.10 Video:\n\nAnother use of backslash: to make long strings\n\nSometimes we need to type in a really long string.\nThe following does NOT work:\n\nprint('An Ogden Nash poem:')\nprint('The camel has a single hump; \nThe dromedary, two; \nOr else the other way around. \nI’m never sure. Are you?')\n\n\n1.11 Excercise: Write a program called my_string_example4.py with the above program and run it. What is the error you observe? Write your answer in module1.pdf\nTo spread a single string over multiple lines, one uses a triple quote as in:\nprint('An Ogden Nash poem:')\nprint('''The camel has a single hump; \nThe dromedary, two; \nOr else the other way around. \nI’m never sure. Are you?''')\n\n\n1.12 Excercise: Write a program called my_string_example5.py with a 5-line limerick.\nEmpty strings: - It is possible to not have anything in a string, as in:\nprint('')\n\n\n\n\n\n\nNote\n\n\n\nThere are no letters, digits or anything between the two single quotes above.\n\n\n\nSuch a string is called an empty string.\nOdd as it may seem, empty strings are useful (we’ll see later) when you want to add strings to make a longer string."
  },
  {
    "objectID": "units/unit0/modules/module1.html#case-sensitivity",
    "href": "units/unit0/modules/module1.html#case-sensitivity",
    "title": "Module 1: A few more getting-started examples",
    "section": "1.3 Case sensitivity",
    "text": "1.3 Case sensitivity\nWhat if we had used uppercase P instead of lowercase p in print?\nprint('Hello World!')\n\n1.13 Excercise: Write up the above program in case_error.py and run it. What is the error you get?\nWrite your answer in module1.pdf.\nWhat if we changed the case inside a string?\nprint('helLo WoRLd!')\n\n\n1.14 Excercise: Write up the above program in my_string_example6.py and run it to see if it works.\nPython is case sensitive but strings are like data inside programs, which means they can be whatever we like.\n\nThe two strings 'Hello World!' and 'helLo WoRLd!' are fine as two different strings, if that’s we want.\nHowever, Python has only one print and so it won’t recognize Print (with capital P)."
  },
  {
    "objectID": "units/unit0/modules/module1.html#a-peek-at-the-future",
    "href": "units/unit0/modules/module1.html#a-peek-at-the-future",
    "title": "Module 1: A few more getting-started examples",
    "section": "1.4 A peek at the future",
    "text": "1.4 A peek at the future\nWe will occasionally jump ahead and present an example of a program that does something advanced, just so you get a feel for what’s coming.\nWith these examples, we’ll only ask you to type up the program and run the program.\nAnd then we’ll point out a few features, just so that you get acquainted with features that you’ll eventually encounter.\nimport tkinter as tk\n\nwindow = tk.Tk()\ncanvas = tk.Canvas(master=window, width=500, height=400)\ncanvas.pack()\n\nfor i in range(1, 10):\n    fontSize = i * 20\n    fontStr = 'Times ' + str(fontSize) + ' italic bold'\n    startx = 200 + 10 * i\n    starty = 20 + i * 20\n    canvas.create_text(\n        startx, starty, text=\"Hello\", font=fontStr, fill='grey')\n\nwindow.mainloop()\n\n1.14 Excercise: Write up the above program in hello_gui.py being careful to type it in exactly as shown above, paying attention to every keystroke. Run it to get something like:  If something went wrong with the typing, you can instead download hello_gui.py but only after giving the typing a good try. \nNow let’s point out a few features of the program, and we’ll focus on the middle section: \nOur belief is that by showing you bits and pieces of advanced code, you’ll be primed to absorb these concepts when we work through them.\nOne of the most important things to observe about is that some code is indented:"
  },
  {
    "objectID": "units/unit0/modules/module1.html#a-reminder-about-computerese",
    "href": "units/unit0/modules/module1.html#a-reminder-about-computerese",
    "title": "Module 1: A few more getting-started examples",
    "section": "1.5 A reminder about computerese",
    "text": "1.5 A reminder about computerese\nAs you complete Module 1 and ready that for submission you might want to review: - Did you make your module1 folder? Did you ensure that the m in module1 is lowercase and that there’s no space module and 1? - Are your Python programs from this module in that folder? - Did you make your module1.pdf in this folder? Does it have the non-coding questions answered within? - Do you recall how to make a zip?\nIf it’s a bit hazy, please make sure to review from the material on computerese from Module 0.\nHere’s more information about submitting Module 1"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Email: Dr. Kartik Bulusu"
  },
  {
    "objectID": "about.html#instructor",
    "href": "about.html#instructor",
    "title": "About",
    "section": "",
    "text": "Email: Dr. Kartik Bulusu"
  },
  {
    "objectID": "about.html#timelocation-of-course",
    "href": "about.html#timelocation-of-course",
    "title": "About",
    "section": "Time/Location of course",
    "text": "Time/Location of course\nThis is a fully asychronous course: there are no fixed meeting times, nor any attendance requirement. All the material is released on day 1. You will be expected to submit work according to the schedule on the Coursework page."
  },
  {
    "objectID": "about.html#office-hours",
    "href": "about.html#office-hours",
    "title": "About",
    "section": "Office Hours",
    "text": "Office Hours\nTBD"
  },
  {
    "objectID": "about.html#why-are-there-no-recorded-video-lectures",
    "href": "about.html#why-are-there-no-recorded-video-lectures",
    "title": "About",
    "section": "Why are there no recorded video lectures?",
    "text": "Why are there no recorded video lectures?\nLearning to program by watching some talk about it is less effective than learning by “doing programming”. Thus, most of your learning will consist of reading a concept, seeing an example, and immediately following that with a programming exercise that really gets into the details. At the same time, we know it’s useful to have hints and explanations to help you in your exercises, when you are particularly stuck. Accordingly, although most of the material is written, and includes elaborate instructions, there is recorded media that you can optionally view/listen if you need it. These are recorded from a student point of view (but carefully vetted by us), as you’ll see."
  },
  {
    "objectID": "about.html#teaching-assistants-tas",
    "href": "about.html#teaching-assistants-tas",
    "title": "About",
    "section": "Teaching Assistants (TAs)",
    "text": "Teaching Assistants (TAs)\nInfo will be posted on BB."
  },
  {
    "objectID": "about.html#ta-office-hours",
    "href": "about.html#ta-office-hours",
    "title": "About",
    "section": "TA office hours",
    "text": "TA office hours\nFriday afternoons (time/link on BB)"
  },
  {
    "objectID": "about.html#ta-email",
    "href": "about.html#ta-email",
    "title": "About",
    "section": "TA email",
    "text": "TA email\nInfo will be posted on BB."
  },
  {
    "objectID": "about.html#prerequisites",
    "href": "about.html#prerequisites",
    "title": "About",
    "section": "Prerequisites",
    "text": "Prerequisites\nNone"
  },
  {
    "objectID": "about.html#official-catalog-description",
    "href": "about.html#official-catalog-description",
    "title": "About",
    "section": "Official catalog description",
    "text": "Official catalog description\nIntroduction to programming a computer using the Python language; variables, types, assignment, conditionals, loops, lists, and program units. (Fall, spring, and summer, Every Year)."
  },
  {
    "objectID": "about.html#informal-description",
    "href": "about.html#informal-description",
    "title": "About",
    "section": "Informal description",
    "text": "Informal description\nThis course is all about getting started with programming in the language called Python."
  },
  {
    "objectID": "about.html#specific-learning-outcomes",
    "href": "about.html#specific-learning-outcomes",
    "title": "About",
    "section": "Specific learning outcomes",
    "text": "Specific learning outcomes\nBy the end of the course, you will be able to - Demonstrate familiarity with key concepts in a procedural programming language such as: variables, control structures, functions, input and output. - Demonstrate the ability to use programming to solve problems appropriate to a beginning class in programming. - Acquire familiarity with how programming can be applied to solve problems."
  },
  {
    "objectID": "about.html#textbook",
    "href": "about.html#textbook",
    "title": "About",
    "section": "Textbook",
    "text": "Textbook\nAll of the material is online (and free)."
  },
  {
    "objectID": "about.html#other-requirements",
    "href": "about.html#other-requirements",
    "title": "About",
    "section": "Other requirements",
    "text": "Other requirements\n\nYou will be expected to have and use your Blackboard account. If you have trouble logging in, you will need to resolve this by the first meeting."
  },
  {
    "objectID": "about.html#staying-on-top-of-the-course",
    "href": "about.html#staying-on-top-of-the-course",
    "title": "About",
    "section": "Staying on top of the course",
    "text": "Staying on top of the course\n\nVisit the course website (this one) and the Blackboard part of this course several times each week.\nBe responsive to email sent to you."
  },
  {
    "objectID": "about.html#course-load",
    "href": "about.html#course-load",
    "title": "About",
    "section": "Course load",
    "text": "Course load\nThis is not a light course. The course has three units, each of which has a number of modules. Based on students who’ve taken the course previously, we’ve identified the approximate number of hours needed for each module.\nImportant: the hours needed vary by module, so please plan accordingly. The first unit starts off gently, after which the pace increases. Unit-1 is the hardest."
  },
  {
    "objectID": "about.html#coursework-and-grading",
    "href": "about.html#coursework-and-grading",
    "title": "About",
    "section": "Coursework and grading",
    "text": "Coursework and grading\nSee approximate grade breakdown."
  },
  {
    "objectID": "about.html#assignment-submission-and-late-work-policy",
    "href": "about.html#assignment-submission-and-late-work-policy",
    "title": "About",
    "section": "Assignment submission and late work policy",
    "text": "Assignment submission and late work policy\n\nAll your work will be submitted via Blackboard.\nLate submission policy. Every student will get to use three extensions in the semester:\n\nA single-use 1-day extension.\nA single-use 2-day extension.\nA single-use 4-day extension.\nA single-use 6-day extension.\n\nEach extension can be used only once, and the entire extension will be applied. (That is, you can’t submit something three days late, and claim that you’ve used only part of the 4-day extension.) You do NOT need to tell us you are using an extension, we will merely apply the best fit in the order we get the submissions. You also cannot pick and choose which extension to apply.\nWe’re doing extensions ONLY because because everyone gets ill or has the occasional sudden emergency. It is NOT intended to be used as a tool for time-management or convenience.\nFor all other submissions where the extension does not apply, we will take off 25% per day late. These points taken off will NOT not be pro-rated hourly. Thus, if something is due 5pm March 19th, a submission at 5.05pm March 19th has 25% taken off.\nYou get bonus points if you don’t use any extensions at all and if you don’t submit anything late.\nIf you’re seeking an extension because you’ve been seriously ill and have a letter from a doctor, communicate with the TA.\nYou cannot use any extension resulting in a submission past the last due date."
  },
  {
    "objectID": "about.html#academic-integrity-policy",
    "href": "about.html#academic-integrity-policy",
    "title": "About",
    "section": "Academic Integrity policy",
    "text": "Academic Integrity policy\n\nIn this course, you will be expected to work on all assigned coursework by yourself, unless otherwise specified by instructions on this site.\nYou may not, without permission from the instructor, exchange course-related code with anyone (including anyone not registered in the course), or download code for use in your coursework, or use material from books other than the textbook. Likewise, you may not look at anyone else’s code or show your code to anyone else.\nImportant: We have sophisticated tools that automatically examine all students’ code and that perform a comparison. These tools are very good at determining similarity in code. We also reserve the right to ask you probing questions about submitted work; failure to answer these questions may result in loss of points for the submitted work.\nImportant: Parts of the final exam will feature small variations of the assigned work but without electronic access to your computer. Thus, you will succeed in the exam only if you actually do the assigned work.\nIf you use material in your assignments that are from outside the course material, then you should be prepared to explain that material. The instructors and TAs reserve the right to question you on your use of any extraneous material. Failure to answer such questions might be viewed as grounds for an integrity violation.\nThe Academic Integrity Code will apply to this course. Please read through the code carefully. Penalties for violating the code or the policies described here include failing this course.\nIf you have a disability that may effect your participation in this course and wish to discuss academic acommodations, please contact us as soon as possible."
  },
  {
    "objectID": "about.html#minimum-course-load",
    "href": "about.html#minimum-course-load",
    "title": "About",
    "section": "Minimum course load",
    "text": "Minimum course load\nIn a 15-week semester, including exam week, students are expected to spend a minimum of 100 minutes of out-of-class work for every 50 minutes of direct instruction, for a minimum total of 2.5 hours a week. A 3-credit course includes 2.5 hours of direct instruction and a minimum of 5 hours of independent learning, or a minimum of 7.5 hours per week. More information about GW’s credit hour policy can be found at: provost.gwu.edu/policies-forms"
  },
  {
    "objectID": "about.html#statement-on-inclusive-teaching",
    "href": "about.html#statement-on-inclusive-teaching",
    "title": "About",
    "section": "Statement on inclusive teaching",
    "text": "Statement on inclusive teaching\nIt is my intent that students from all backgrounds and perspectives be well-served by this course, and that the diversity that the students bring to this class be viewed as a resource, strength and benefit. Your suggestions are encouraged and appreciated. Please let me know ways to improve the effectiveness of the course for you personally, or for other students or student groups."
  },
  {
    "objectID": "about.html#gws-emergency-preparedness-guide",
    "href": "about.html#gws-emergency-preparedness-guide",
    "title": "About",
    "section": "GW’s emergency preparedness guide",
    "text": "GW’s emergency preparedness guide"
  },
  {
    "objectID": "about.html#finally-note-that-course-policies-may-be-adjusted-or-modified-during-the-course-of-the-semester.",
    "href": "about.html#finally-note-that-course-policies-may-be-adjusted-or-modified-during-the-course-of-the-semester.",
    "title": "About",
    "section": "Finally, note that course policies may be adjusted or modified during the course of the semester.",
    "text": "Finally, note that course policies may be adjusted or modified during the course of the semester."
  },
  {
    "objectID": "coursework.html",
    "href": "coursework.html",
    "title": "Coursework",
    "section": "",
    "text": "Important:"
  },
  {
    "objectID": "coursework.html#schedule",
    "href": "coursework.html#schedule",
    "title": "Coursework",
    "section": "Schedule",
    "text": "Schedule\n\n\n\nWeek\nTopic\nDue (Due Date)\n\n\n\n\n16 Jan\nFirst Lecture\nNothing due\n\n\n23 Jan\n2nd Lecture\nNothing due"
  }
]