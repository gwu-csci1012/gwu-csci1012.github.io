[
  {
    "objectID": "submit-remember.html",
    "href": "submit-remember.html",
    "title": "What to remember about submitting work",
    "section": "",
    "text": "The submission requirements are stringent. You MUST name folders and files exactly as described.\nIn particular: be careful to avoid spaces where they shouldn’t be spaces, and to use lowercase when asked. For example:\n\nmodule0.pdf (correct)\nModule0.pdf (wrong: starts with uppercase)\nmodule 0.pdf (wrong: space before 0)\nmodule0.docx (wrong: not a pdf).\n\nYour programs must do what’s asked, no less no more. If you print more than what’s required the autograder will not grade your program.\n\nIf you’ve forgotten how to make folders, zip files etc, now may be a good time to review your computerese skills\n\n\nYou will be submitting your PDF files TWICE, once inside the zip file and once separately in Blackboard."
  },
  {
    "objectID": "submit-remember.html#most-important",
    "href": "submit-remember.html#most-important",
    "title": "What to remember about submitting work",
    "section": "",
    "text": "The submission requirements are stringent. You MUST name folders and files exactly as described.\nIn particular: be careful to avoid spaces where they shouldn’t be spaces, and to use lowercase when asked. For example:\n\nmodule0.pdf (correct)\nModule0.pdf (wrong: starts with uppercase)\nmodule 0.pdf (wrong: space before 0)\nmodule0.docx (wrong: not a pdf).\n\nYour programs must do what’s asked, no less no more. If you print more than what’s required the autograder will not grade your program.\n\nIf you’ve forgotten how to make folders, zip files etc, now may be a good time to review your computerese skills\n\n\nYou will be submitting your PDF files TWICE, once inside the zip file and once separately in Blackboard."
  },
  {
    "objectID": "submit-remember.html#correct-folder-structure-on-your-laptop",
    "href": "submit-remember.html#correct-folder-structure-on-your-laptop",
    "title": "What to remember about submitting work",
    "section": "Correct folder structure on your laptop",
    "text": "Correct folder structure on your laptop\nFor the overall class you should have a folder named cs1012 on your computer:\n\nYou can create one such folder on your Desktop, but you could also place this inside some other folder.\n\n\n\n\n\n\n\nWarning\n\n\n\nIt’s all lowercase, with no spaces.\n\n\nIn the cs1012 folder, create a folder for each unit. Eventually, you will create a folder for each unit and each module in a given unit.\nYou must name your folders with the following rules:\n\nThere will be 3 units, so you will ultimately have folders called unit0, unit1 and unit2 inside your cs1012 folder.\nName the unit folders carefully:\n\nFor your Unit 0 work, name that unit’s folder unit0.\nFor your Unit 1 work, name that unit’s folder unit1.\nFor your Unit 2 work, name that unit’s folder unit2.\n\nEach unit has several modules. For each module folder inside the each unit folder, you must name the module folder according to these rules: Each unit has several modules. For each module folder inside the each unit folder, you must name the module folder according to these rules:\n\nFor your Module 0 work, name that module’s folder module0.\nFor your Module 1 work, name that module’s folder module1.\nAnd so on.\n\nEach unit has will also have assignments. For each assignment inside each unit, make a folder. You must name the assignment folders according to these rules:\n\nFor your Assignment 1 work, name that folder assignment1.\nFor your Assignment 2 work, name that folder assignment2.\nAnd so on if there are more assignments.\n\nThus, one looks inside your 1012 folder, we’d expect to see three sub-folders called unit0, unit1, and unit2.\nAnd, if one further looks inside the unit0 folder, we’d expect to see 9 sub-folders:\n\n7 of these will be called module0, module1, module2, module3, module4, module5 and module6\n2 of these will be called assignment1 and assignment2."
  },
  {
    "objectID": "submit-remember.html#correct-location-and-naming-of-files-within-folders",
    "href": "submit-remember.html#correct-location-and-naming-of-files-within-folders",
    "title": "What to remember about submitting work",
    "section": "Correct location and naming of files within folders",
    "text": "Correct location and naming of files within folders\nEvery module and every assignment will feature multiple files:\n\nMost files will be Python programs. The names of these will end in .py.\nFor example: myname.py.\nAnother example from Module 0 in Unit 0: In Exercise 0.4, you are instructed to create the files error1.py and error2.py. These need to be saved in your module0 folder when using your code editor (Thonny or Spyder).\nEvery module will also have a single PDF file with the same first-part named as the module name. For example: you will make a file called module0.pdf in your module0 folder.\nWhen is the PDF file to be used? The single PDF (one per module) is used when you are to write responses outside of Python code. For example:\n\nIn Module 0, you are asked to submit a picture and write (in English) something about yourself. You can write in Word, and save to a PDF file called module0.pdf in your module0 folder.\nIn Exercise 1.11 of Module 1, you are asked to describe an error. You will describe (in plain English) by writing in module1.pdf. Similarly, Exercise 1.8 asks you to describe the output of a program. Copy-paste the output from Thonny/Spyder into module1.pdf. Make sure module1.pdf is saved to in your module1folder."
  },
  {
    "objectID": "submit-remember.html#making-a-zip-to-submit",
    "href": "submit-remember.html#making-a-zip-to-submit",
    "title": "What to remember about submitting work",
    "section": "Making a zip to submit",
    "text": "Making a zip to submit\nWhen you zip your files when preparing to submit them, you must zip only the files for the current module and you must name the zip file for the corresponding folder.\n\nThe easy way to do this is to zip the folder containing the files.\n\nFor example, for Unit 0 : Module 1, you must zip the module1 folder that is inside the unit0 folder. Since this folder will contain the module1.pdf file, it will get included in the zip file.\nWhen it’s time to submit, you will upload this zip file (example: module1.zip) into the appropriate place in Blackboard."
  },
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": "FAQ",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "units/unit0/modules/module3.html",
    "href": "units/unit0/modules/module3.html",
    "title": "Module 3: Loops: the for-loop",
    "section": "",
    "text": "Home » Units » Module 3"
  },
  {
    "objectID": "units/unit0/modules/module3.html#objectives",
    "href": "units/unit0/modules/module3.html#objectives",
    "title": "Module 3: Loops: the for-loop",
    "section": "Objectives",
    "text": "Objectives\nBy the end of this module, for simple HelloWorld-like programs, you will be able to:\n\nIdentify the new syntactic elements with the basic output-only for-loop.\nDemonstrate ability to mentally trace execution of for-loops.\nProduce desired output using for-loop and print’s.\nDistinguish between count-up and count-down loops.\nUse some nested for-loops with independent variables.\nUse some nested for-loops with dependent conditions.\nIdentify and correct syntax errors related to above objectives.\nDistinguish between syntax errors and debugging."
  },
  {
    "objectID": "units/unit0/modules/module3.html#an-example",
    "href": "units/unit0/modules/module3.html#an-example",
    "title": "Module 3: Loops: the for-loop",
    "section": "3.0 An example",
    "text": "3.0 An example\nConsider the following program:\ndef print_big_M():  \n    print('*   *')\n    print('** **')\n    print('* * *')\n    print('*   *')\n    print('*   *\\n')\n\ndef print_big_O():  \n    print('*****')\n    print('*   *')\n    print('*   *')\n    print('*   *')\n    print('*****\\n')\n\nprint_big_M()\nprint_big_O()  \nprint_big_O()  # 1st repetition\nprint_big_O()  # 2nd repetition\nprint_big_O()\nprint_big_O()\nprint_big_O()  # 5th repetition - 6 O's in all\nWhat we would like is a way to organize repetition.\nWe will do this using one version (there are many) of the for-loop, one of the most important programming constructs:\ndef print_big_M():  \n    print('*   *')\n    print('** **')\n    print('* * *')\n    print('*   *')\n    print('*   *\\n')\n\ndef print_big_O():  \n    print('*****')\n    print('*   *')\n    print('*   *')\n    print('*   *')\n    print('*****\\n')\n\n\nprint_big_M()\nfor i in range(6):\n    print_big_O()\n\n3.1 Excercise: Type up the above in animal_sounds_loop.py and run it. Also save the file so that it can be submitted (You will need to save the appropriate files for every such “type up” exercise).\n\n\n3.2 Excercise: Using the example above as a point of reference, print out your own animal sound. Be sure to use a for-loop to repeatedly print one letter in the sound. Write your code in my_pet_sound_loop.py.\nLet’s zoom in on the for-loop and examine it.\nTo do so, we’ll write a different for-loop:\nfor i in range(6):\n    print(i)\n\n\n3.3 Excercise: Type up the above in my_forloop_example.py and run it. You should observe this:\n0\n1\n2\n3\n4\n5\nIn the place in the code where you see the number 6, replace 6 with 10 and then run the program. Next, try 2 instead of 6. Finally, try 0 instead of 6. What is the output in each case? Report in your module pdf (module3.pdf). Submit the program with 6.\nLet’s now examine elements of the loop: - There’s the special word for \n\nThen, there’s the for-loop variable \nThe special word \nThe element that controls the spread of different values that variable i takes on at each iteration of the loop: \nThe colon at the end: \nFinally, the block of code (in this case, just one line) that’s called the body of the loop: \n\nLet’s change the program slightly and then set about explaining how the loop works:\nfor i in range(6):\n    print(i)\n    print('Hello')\n\n\n3.4 Excercise: Type up the above in my_forloop_example2.py and run the program.\nObserve that the body of this for-loop has two statements: \nLet’s now use a slightly fictionalized way to explain the action of this loop:\n\nThink of the Python part of your computer (since your laptop does many things) as reading your program and then carrying out the instructions.\nWhen it encounters the for word, it says “Ah, here’s a for-loop”.\nThen it sees the variable i and says (to itself), “This is the variable whose value will change after each iteration”.\nThen it sees the term range(6) and says “Oh, i will start at 0 and end just before 6, which means it will be 0 in the first iteration, 1 in the second, 2 in the third, 3 in the fourth, 4 in the fifth, 5 in the last”.\nThen, it starts executing the body of the loop for the first iteration:\n\nFor the first iteration, i=0.\nThe entire body of the loop executes with i being replaced by 0: \nFor the second iteration, i=1 \nThird iteration: \nFourth iteration: \nFifth iteration: \nSixth and final iteration: \n\nNow the for-loop is done and the execution goes past the whole for-loop to whatever’s there.\n\nIn this case, there’s no other code and the program completes."
  },
  {
    "objectID": "units/unit0/modules/module3.html#variations",
    "href": "units/unit0/modules/module3.html#variations",
    "title": "Module 3: Loops: the for-loop",
    "section": "3.1 Variations",
    "text": "3.1 Variations\nTo explore for-loops further, we’ll look at some variations of the basic for-loop:\n1. First, we could have named our for-loop variable\nfor count in range(6):\n    print(count)\n\n\n\n\n\n\nNote\n\n\n\nIt’s customary to use short variable names like i and j\n\n\n2. To go through a loop five times, any range of numbers will do:\nfor i in range(10, 16):\n    print(i)\n\n\n\n\n\n\nNote\n\n\n\n\nHere, the range feature has both a starting value (10) and just-after-ending value (16) specified.\nThis will print the numbers 10 through 15.\n\n\n\n3. We don’t have to increment the for-loop variable by 1.\nfor i in range(10, 16, 2):\n    print(i)\n\nThis prints the numbers 10, 12, 14.\nThe number 2 in range(10, 16, 2) specifies an increment amount.\nThus, we start with i taking the value 10 in the first iteration.\nIn the second iteration, i becomes 12 (because 10+2 = 12).\nIn the third iteration, i becomes 14 (incrementing 12 by 2).\nIf we were to increment 14 by 2 it becomes 16 which is past the last value allowed.\nImportant: think of 16 as “the variable cannot have this value or anything past this value”.\n\n4. We can decrement, as in:\nfor i in range(16, 10, -1):\n    print(i)\n\nThis will print 16, 15, 14, 13, 12, 11.\nWe start with 16 (the first part of the range).\nAfter each iteration we apply the increment/decrement amount.\nIn this case, applying -1 to 16 gives us 15, which gets printed.\nThen, the third time through, i becomes 14. And so on.\nIn the last iteration, i becomes 11.\nFinally, when i is decremented to 10, the loop is ended.\n\n\n3.6 Excercise: Type up the above four examples in my_forloop_variation1.py, my_forloop_variation2.py, my_forloop_variation3.py, and my_forloop_variation4.py. Run to confirm the output.\n\n\n3.7 Excercise: In count_odd_up.py, write a loop to print the odd numbers from 1 to 25 (thus, skipping by 2, and including 1 and 25 in the output).\n\n\n3.8 Excercise: In count_even_down.py, write a loop to print the even numbers from 24 down to 2 (inclusive of 24 and 2)."
  },
  {
    "objectID": "units/unit0/modules/module3.html#nested-for-loops",
    "href": "units/unit0/modules/module3.html#nested-for-loops",
    "title": "Module 3: Loops: the for-loop",
    "section": "3.2 Nested for-loops",
    "text": "3.2 Nested for-loops\nWe’ll start by writing a program to print a little number triangle like this:\n1\n22\n333\n4444\nNotice: there’s repetition across a row of numbers: a potential use of for-loops!\nWe’ll do this in stages, starting with this program:\nprint(1)               # print 1 all by itself\n\nfor i in range(2):     # i will start at 0, go up to 1\n    print(2, end='')\nprint()                # Print nothing but go to the next line.\n\nfor i in range(3):     # i ranges from 0 to 2\n    print(3, end='')\nprint()\n\nfor i in range(4):     # i ranges from 0 to 3\n    print(4, end='')\nprint()\nObserve:\n\nWe’ve used end='' (two single quotes in succession) to avoid printing each number on a single line.\nOne could use two double quotes in succession as well.\nprint() merely goes to the next line. (Or, stated differently, ends the current line being printed.)\n\n\n3.10 Excercise: Add a row for 5 (with five of them), writing your code in my_forloop_print.py.\n\n\n3.11 Excercise: Just for the heck of it, could one use a for-loop to achieve the printing of 1 all by itself? That is, answer the question in your module pdf: can a for-loop be set up so that you go into it exactly once? Write your code in my_forloop_print2.py.\nNext, observe that the upper-limits of the for-loops are themselves increasing: \nAlso, observe that the very thing we’re printing across a row is the loop limit itself: \nAnother way to say this:\nWhen the value is 2, print a row of two 2's\nWhen the value is 3, print a row of three 3's\nWhen the value is 4, print a row of four 4's\nThus, we could try to do is:\nfor j in range(2, 5):   # let j iterate from 2 to 4\n    # print j occurences of j using a loop\nBut we already know how to print a row of j’s:\nfor j in range(2, 5):   # let j iterate from 2 to 4\n    # print a row of j's (j of them)\n    for i in range (j):\n        print(j, end='')\nLet’s put this together in a complete program:\nprint(1)                   # print 1 all by itself\n\nfor j in range(2, 5):      # j iterates from 2 to 4\n    for i in range(j):     # for each j, print j of them\n        print(j, end='')\n    print()    \n\n\n\n3.13 Excercise: Change the program to print a fifth row with five 5’s. Also adjust the for-loop so that the for-loop also takes care of printing the sole 1 that appears in the row of the sole 1’s. That is, adjust the for-loop conditions so that you don’t need the stand-alone print(1) to print 1. Write your code in my_forloop_print3.py.\nLet’s review what we learned above:\n\nThe outer loop variable’s value is used in the inner loop: \nConsider a single iteration of the outer-loop (e.g., when j is 3). \n\nFor this value of j, the inner loop executes j times.\nThus, when j is 3, the inner loop has 3 iterations.\n\nThis is an example of a nested for-loop in which the inner loop’s execution depends on the value of the outer-loop variable.\nAnother way to say it: a nested for-loop has one for-loop inside another.\nWe will use nesting in other contexts as well, when one structure is placed inside another."
  },
  {
    "objectID": "units/unit0/modules/module3.html#tracing-through-a-program-in-detail",
    "href": "units/unit0/modules/module3.html#tracing-through-a-program-in-detail",
    "title": "Module 3: Loops: the for-loop",
    "section": "3.3 Tracing through a program in detail",
    "text": "3.3 Tracing through a program in detail\nWe’ll now look at an example of how to execute a program “by hand”. That is, how to trace a program’s execution by painstakingly following its execution step-by-step.\nAt first this will appear tedious, but it is critical to a firm understanding of how programs execute, and eventually to your own writing of programs.\nWe’ll first do a longer, more narrative version here, and then show you how to submit a much shorter version for your exercises.\nFor our example, let’s look at the program we last saw:\nprint(1)                   \n\nfor j in range(2, 5):      \n    for i in range(j):     \n        print(j, end='')\n    print()    \nLet’s now dive into the longer version, just for the sake of understanding.\nTo make best use of this:\n\nOpen this same page in another browser, and have the program side-by-side, as you read what’s below.\nRead out aloud what you see below.\n\nReady? Let’s trace through: \n\nRight at the start, the first line is print(1). This prints out 1, and moves to the next line. \nInitially j=2 at the start of the outer for-loop: \nSince j is 2, it’s within the range, and we enter the outer for-loop.\n\nNow we encounter the inner for-loop, where i is set to 0\n\n\n\n\n\n\nNote\n\n\n\nwhen range has only one number specified, it’s understood to be the upper limit.\n\n\nThe upper limit is the current value of j, which is 2. \nInside the inner loop, we execute print(1), which, because j is now 2, will print 2. \nWe’re at the end of the inner loop, so now i increments to 1: \nSo now inside the inner-loop, we print 2 again \nThen, at the end of the inner for-loop, we return to the top where i increments to 2.\nSince i is at the limit, we exit the inner for-loop. \n\n\n\n\n\n\nNote\n\n\n\nThe inner loop iterated twice.\n\n\n\nNext, we go past the inner loop to print(), which goes to the beginning of the next line. \nThis completes the first iteration of the outer, after which we go to the top of the outerloop and increment j. \nExecution now enters the outerloop with j set to 3.\n\nNow we encounter the inner for-loop, where i is set to 0\nThe upper limit is the current value of j, which is 3.\nSo, the inner loop executes three times, with i first set to 0, then to 1, then to 2.\nThis will result in printing three 3’s.\nWhen i becomes 3, it hits the inner-loop limit and proceeds to the print() that follows.\nThe output so far is:\n\n1\n2 2\n3 3 3\nThis completes the iterations of the inner loop with the outer loop j set to 3.\nNext, j becomes 4 \n\nThe inner loop starts with i set to 0.\nEach time through i increments.\nUntil i hits the limit j (which is 4 now).\nThis results in four 4’s being printed in a line.\nThen we come out of the inner loop and execute print(), which goes to the next line.\n\nThe output so far is\n\n1\n2 2\n3 3 3\n4 4 4 4\n\nFinally at the end of the outer loop, j becomes 5 and hits the limit of the outer loop \n\nYes, that was long. But doing this many times will help you understand how to read programs. Later, you will become good at this and will, with a quick glance at the inner-loop, say “Oh, this prints 2 twice in the first iteration of the outer.”\nImportant: when you need to submit a program’s traced-out execution, use a shorter version. For example, see this PDF for the above program.\n\n3.14 Excercise: Consider this program:\nfor i in range(1, 6):\n    for j in range(i, 0, -1):\n        print('*', end='')\n    print(' ', end='')\n    for j in range(1, i):\n        print('-', end='')\n    print()\n\n\nFirst, trace through the values of i and j by hand and try to figure out what gets printed. Do this painstakingly for each possible value of i and j, remembering that i is now the name of the outerloop variable. Write your tracing in module3.pdf, using the shorter “table” format we saw in see this PDF for the above program earlier. Then, edit, compile and execute the above program in my_forloop_trace.py.to see if you were right.\n\n\n\n3.16 Excercise: Consider this program:\nWrite a program to print out consecutive integers in a diagonal, as in\n1\n 2\n  3\n   4\n    5\nUse a nested for-loop as in earlier examples to print the requisite number of spaces before printing a digit. Write your code in my_diagonal_print.py.\n\n\n3.17 Excercise: Consider this program:\nWrite a program to print out\nI'm feeling cold: b rrrrrr rrrrr rrrr rrr rr r\nUse a regular print to print everything up to the b. Then, use a nested for-loop for the r’s. Don’t forget the space between each grouping of r’s. Write your code in my_brr_print.py."
  },
  {
    "objectID": "units/unit0/modules/module3.html#reading-and-writing",
    "href": "units/unit0/modules/module3.html#reading-and-writing",
    "title": "Module 3: Loops: the for-loop",
    "section": "3.4 Reading and writing",
    "text": "3.4 Reading and writing\nLet’s consider how to read a single for-loop, such as:\nfor k in range(1, 10, 2):\n    print(k, end=' ')\n    print(2*k)\n    print('-')\n\n3.19 Excercise: Write up the above in my_simpleloop.py and run to see the output. Then in module3.pdf, trace the execution of the program.\nInstead of explaining the execution, let’s focus on how to read such a program:\n\nThe first thing to do is to observe two parts to the loop: \nNext, study the for-statement to understand the nature of the iteration: \nNow look inside the body: \n\nLet’s also point out what to keep in mind when writing:\n\nFirst, the for-loop header or for-statement: \nNext, the loop body: \nImportant: we will be nitpicky about writing because good writing habits will save you a lot of trouble.\n\nNext, let’s combine reading with mental execution. Consider the following program:\ndef functionOne():\n    print('*', end='')\n\ndef functionTwo():\n    print('*')\n\ndef functionThree():\n    for j in range(0, 5):\n        functionOne()\n    functionTwo()\n\nfor i in range(1, 11, 2):\n    functionThree()\n\n\n3.20 Excercise: What does it print? Try to figure this out by mental execution first. Then, type it up, compile and execute to confirm, writing your code in my_execution_exercise.py. Then in module3.pdf, trace the execution of the program."
  },
  {
    "objectID": "units/unit0/modules/module3.html#when-things-go-wrong",
    "href": "units/unit0/modules/module3.html#when-things-go-wrong",
    "title": "Module 3: Loops: the for-loop",
    "section": "3.5 When things go wrong",
    "text": "3.5 When things go wrong\nAs code gets more complex, it gets easier to make mistakes, and harder to find them.\nIn each of the programs below, try to determine the error without compiling the program. Then, write up the program, compile and see what the compiler says. After that, fix the error.\n\n3.22 Excercise: \nfor i in range(0 6):\n    print(i)\nWrite your corrected code in my_loop_exercise1.py.\n\n\n3.23 Excercise: \nfor i in range(0, 6)\n    print(i)\nWrite your corrected code in my_loop_exercise2.py.\n\n\n3.24 Excercise: \nfor i in range(0, 6:\n    print(i)\nWrite your corrected code in my_loop_exercise3.py.\n\n\n3.25 Excercise: \nfor i in range(0, 6):\nprint(i)\nWrite your corrected code in my_loop_exercise4.py.\n\n\n3.26 Excercise: \nfor in range(0, 6):\n    print(i)\nWrite your corrected code in my_loop_exercise5.py.\n\n\n3.27 Excercise: \nfor i in range(0, 6):\n    print i\nWrite your corrected code in `my_loop_exercise6.py.\nLet’s point out the difference between a syntax error and a logical error:\n\nA syntax error will not allow a program to run.\nThis means you are using the language incorrectly.\nOn the other hand, you could have a program that has no syntax errors (it runs) but it does not produce the desired output. This means there’s a logical error.\nThe process of identifying and fixing logical errors is called debugging.\nA bug is a logical error.\n\n\n\n3.28 Excercise: \nThe following code intends to print\n55555\n4444\n333\n22\n1\nfor i in range(5, 0, 1):\n    for j in range(1, i):\n        print(i, end='')\n    print()\nBut there are two bugs. First, try to find the problems solely by reading and mental execution. Then, type up the program in my_loop_exercise7.py. What does it print? Report what you see in module3.pdf. Then fix the program to get the desired output."
  },
  {
    "objectID": "units/unit0/modules/module3.html#a-peek-at-the-future",
    "href": "units/unit0/modules/module3.html#a-peek-at-the-future",
    "title": "Module 3: Loops: the for-loop",
    "section": "3.6    A peek at the future",
    "text": "3.6    A peek at the future\nConsider the following program:\nimport tkinter as tk\n\nwindow = tk.Tk()\ncanvas = tk.Canvas(master=window, width=200, height=100)\ncanvas.pack()\n\ndef draw_rectangles():\n    for i in range(10, 51, 10):              \n        canvas.create_rectangle(\n            3*i, i, 3*i+20, i+10, outline=\"blue\")\n\ndraw_rectangles()\nwindow.mainloop()\n\n3.29 Excercise: Download the above program, my_forloop_rectangle.py, and execute the program. If you’re feeling brave, add a second for-loop so that output looks like:\n\nLet’s point out the for-loop’s part in the program:\n\nFirst, we need to understand how coordinates work differently in Python: \nNext, let’s read the for-loop statement to see how it iterates: \n\nWe can see that i will be 10 the first time through the loop.\nThen i becomes 20, then 30 etc until 50.\nThus, there are 5 iterations through the loop.\n\nNotice how i is used in the calculation of the measurements needed to draw the rectangle:  (We spilled a line of code over two lines to make the font large enough.)\n\nWhen i is 10, the first rectangle’s top left corner gets drawn at 30 (which is 3 times i, or 3*i) from the left side, and 10 down from the top.\nIn the second iteration i is 20, which means the top left corner is 60 from the left. And so on.\n\n\n\n\n3.30 Excercise: Download my_forloop_rectangle2.py, and execute the program to see that an animation is really a for-loop.\nAbout animations:\n\nEven if an object moves across a screen (and is in different positions on the screen), there is something that “repeats”.\nWhat repeats is the drawing of the object in different places (with a gap in time to create the illusion of real movement).\nThus, when locations can be calculated we can use a loop to iterate through the different positions.\nThis is essentially how animation works."
  },
  {
    "objectID": "units/unit0/modules/module3.html#some-things-to-keep-mind",
    "href": "units/unit0/modules/module3.html#some-things-to-keep-mind",
    "title": "Module 3: Loops: the for-loop",
    "section": "3.7    Some things to keep mind",
    "text": "3.7    Some things to keep mind\nLet’s introduce the notion of reserved words:\n\nSome words like for and in are special to the language and are called reserved words or key words of the language. \nThere are special rules associated with the usage of such reserved words, which we’ll describe over time. For now, we’re just pointing them out.\nAnother example of a reserved word we’ve seen: def\nIt turns out that, even though print looks like it should be a reserved word, it’s in fact not.\n\nAt this stage, the distinction is not clear and that’s fine.\nAs you learn the language, you’ll learn how to distinguish.\n\n\nCounting from 0:\n\nWhen a single number like 6 is specified in the range as in range(6) \nThus, i is 0 the first time, then 1, then 2, and so on until i = 5 (last time through).\nThe number 6 specifies that i cannot be 6 or higher.\nThus, there is a certain strangeness to get used to:\n\nUnlike math (where counting starts from 1), in programming, the convention is to start from 0.  (Did you notice that’s why we started with Module 0?)\nThe other strangeness is specifying the limit as one higher (6) than than last iteration value (5).\n\n\nThe different uses of range\n\nWhen a single number is specified, as in range(6) the implied start is 0.\nWhen two numbers are specified as in: range(10, 16) the first is the start of the count, and the second is the limit: \n\nThus i is 10 the first time (this is the first thing that’s printed).\nThen i becomes 11.\nThen 12, and so on until the last time through when i is 15.\n\nWhen three numbers are specified as in range(10, 16, 2) the third number is the increment. \n\nHere, i starts as 10 in the first iteration.\nThen, i is 12 in the second iteration.\nThen i becomes 14. This is the last iteration because after that i would be 16, which ends the loop.\n\nUsing range(10, 15, 2) produces the same result as above, and in fact preferable.\n\nAbout comments:\n\nFirst, comments are for us to read. The computer does not read them.\nThus, in terms of execution, this program\n\n# list the even numbers between 10 and 14, inclusive:\nfor i in range(10, 15, 2):    # Notice the increment\n    print(i)\nwill result in the exact output as this one:\nfor i in range(10, 15, 2):\n    print(i)\n\nWe will use comments in two ways, as in the above example:\n\nThe first comment is an example of using a comment as a prelude to code, to explain what’s coming or intended.\nThe second kind that is to the right side of a line of code is like an alert: we’ll use this to point out something to pay attention to in that line of code."
  },
  {
    "objectID": "units/unit0/modules/module3.html#meta",
    "href": "units/unit0/modules/module3.html#meta",
    "title": "Module 3: Loops: the for-loop",
    "section": "3.8 Meta",
    "text": "3.8 Meta\nWe will occasionally step back from the details to comment on how best to learn.\nThis module was a bit different, a little more challenging than modules 1-2.\nWhat to keep in mind:\n\nIt is only natural to feel like you are in an alien landscape.        ⇒ You would feel no different doing the first few modules while learning a foreign language with an entirely different script.\nIt takes a while to absorb some of the details, and that’s just fine.\nNotice that some exercises were significantly more challenging than others:\n\nIn prior modules, you merely typed in something and tried it out, or make a small change.\nWith some exercises (like brrrrr) you had to do it all from scratch.\nBoth involved problem-solving        ⇒ Taking a problem described in words and finding a solution.\n\nProblem-solving is a higher-level skill than programming.\n\nIt takes time to acquire this skill.\nThere is no magic formula or words to simply make “problem solving” work for you.\nThe only way is to develop this skill is to struggle with problems, and with lots of them.\n\nFinally, think about this:\n\nAnyone can acquire both programming and problem-solving skills with sufficient dedication. So why not you?\nIf you get past these hurdles with determination, you will leave in the dust all those who gave up earlier.\n\n\n Previous Module: Module 2 Next Module: Module 4"
  },
  {
    "objectID": "units/unit0/modules/module0.html",
    "href": "units/unit0/modules/module0.html",
    "title": "Module 0: Your First Program",
    "section": "",
    "text": "Home » Units » Module 0"
  },
  {
    "objectID": "units/unit0/modules/module0.html#objectives",
    "href": "units/unit0/modules/module0.html#objectives",
    "title": "Module 0: Your First Program",
    "section": "Objectives",
    "text": "Objectives\nBy the end of this module you will be able to:\n\nExperince writing a really simple program.\nExplain the difference between command-line outputs vs GUI for programs.\n\n\n0.0: Our First Program\nLets take a look at our first program as it appears in a textbook (like this one):\nprint(\"Hello World\")\nThis is a simple program written in the Python programming language, possibly one of the smallest programs one can write, and a traditional starting point for learning programming.\nWe will very soon (below) write this program ourselves.\nFor now, let’s point out a few things:\n\nWhat we see above is the text of the program. \nThe entire program will appear inside of a code editor when we write.\nWe could use one of several code editors.\nFor example, this is how it would look inside the Spyder code editor: \nAnd how it might look in the Thonny code editor: \nVarious editors colorize in different ways for convenience of reading, none of which affect the actual text of the program.\nApart from typing it in (which you’ll do shortly), we haven’t actually run the program.\nIntuitively, just looking at the program we might think that:\n\nIt has to do with some kind of “printing” (because we see print)\nWe have no idea what is meant by the somewhat odd phrase “Hello World!”, but we see it there.\n\nThere are several ways to run a program:\n\nRun the program inside the very same editor used to type in the program.\nRun it without any editor (a slightly advanced topic).\n\nFor example, if we run the program using the Thonny editor, we will see this: \n\nNext, you will try this yourself.\n\n0.1 Excercise: Write and run the helloworld program using these instructions\nSo, what’s with printing the unusual phrase “Hello World!”?\n\nIt’s a tradition in computer science that your first program will print “Hello World!”.\nIt’s meant to pretend that a program is a creature that’s itself communicating to the outside world by saying hello.\n\n\n\n\n0.1 The recipe-cook-dish analogy\nWhat just happened above?\nLet’s use an analogy \n\nA recipe is a bunch of instructions in text form.       ⇒ A program is also a set of instructions in text form.\nBy itself, a recipe doesn’t do anything until it’s acted on.       ⇒ You can type up a program but not do anything with it (i.e., not run it).\nA cook executes a recipe by following the instructions       ⇒ A combination of elements in your laptop executes a program.\nThe net result of a cook executing a recipe is, typically, a dish.       ⇒ The result of executing a program is the program’s output\nWe of course design and write up programs to get useful or interesting output.\nWhen a recipe is poorly written, or if the cook messes up, the result may be failure.       ⇒ A program and the laptop are even more exacting: the slightest error can result in failure.\n\n\n\n0.2 Programming vs. computerese\nWhat we mean by computerese:\n\nThe computer-related tasks and knowledge that are needed, but not the intellectual core of programming.\nWe use the term slightly pejoratively, like legalese.       ⇒ A necessary evil.\nExamples of computerese:\n\nNavigating directories\nLocating files, copying them, moving them.\nMastery of editor keys, shortcuts.\nHandling the quirks of an operating system.\nUploading files to a website, downloading.\n\n\n\n0.2 Excercise: Develop your computerese skills by following these instructions.\n\n\n\n\n\n\n\nNote\n\n\n\nThere is nothing to submit for this particula exercise; it is aimed at generally helping you get proficien with using your computer for programming.\n\n\n\n\n\n0.3 A slight variation\nWe will now spend a bit of time trying a few variations, and also examining what happens when typing mistakes are made.\nConsider this program: \nprint('Hello World!')\nprint('My name is X')\n\n0.3 Excercise: Type up this program but use your own name instead of X. Save the file in the module0 folder as myname.py.\n\n\n\n\n\n\nNote\n\n\n\nIn the future we will be asking you to “type up” programs; in all such cases, please also save the file (for eventual submission)\n\n\n\n\n\n0.4 What happens when things go (even slightly) wrong\nWe’ll now deliberately make a few tiny errors and see what happens:\n\nError #1: forgetting to type the closing parenthesis.\n\nHere’s the program:\n\nprint('Hello World!'\nNote the missing right parenthesis at the end of the line.\n\nWhat happens when we nonetheless try and run the program?\n\nHere’s an example with the Thonny editor: \n\nError #2: What happens if we forget the quotation marks?\n\nHere’s the program:\n\nprint(Hello World!)\n\nWe get something quite similar: \n\n\n\n0.4 Excercise: Confirm that you get the errors above by typing up the two programs as error1.py and save the programs in the module0 folder.\n\n\n\n0.5 A peek at a more complex program\nJust to see what’s coming later, let’s get a sense of what a more complex program looks like.\nYour goal is to look through it with bemused curiosity, as if studying an incomprensible work of abstract art.\nWe’ll just examine the some surface features, as we would when examining some undeciphered ancient script such as: \nLet’s start by running the program.\n\n0.5 Excercise: Download whackamole.py into your module0.py folder Then open it and run it. You should see\n The purpose of the program and how you use it should be easy to figure out.\nLet’s point out a few things:\n\nUnlike the toy helloworld.py example, this program actually does something nontrivial.\nThe program brings up a window, and allows a user to interact with it (the program).\n\nNow let’s list the program and then point out some “surface” features.\nThe full program:\n# whackamole with nerf gun\n\n# Use programs written by others through \"import\"\nimport tkinter as tk  \n\n# Define a window\nwindow = tk.Tk()\n\n# The instructions at the top\ninstructions = 'Click reset, then click fire to strike the mole'\nlabel = tk.Label(text=instructions)\nlabel.pack()\n\n# Build a rectangular space on which to draw \n# shapes like circles\nw = 300\nh = 200\ncanvas = tk.Canvas(master=window, width=w, height=h)\ncanvas.pack()\n\n# These are variables that control the \n# position of the target and nerf ball\ntargetX = 0\ntargetVX = 10\nnerfX = 0\nnerfY = h-10\nnerfVX = 20\nnerfVY = 0\nnerfAY = -3\ndelT = 0.1\nnerfFired = False\n\n\n# This is what we want to do when the \n# reset button is clicked:\ndef reset():\n    global nerfFired, targetX, nerfX, nerfY, nerfVY\n    nerfFired = False\n    targetX = 0\n    nerfX = 0\n    nerfY = h-1\n    nerfVY = 0\n    canvas.delete(\"all\")\n    print('reset')\n\n# When the fire button is clicked, we change \n# the status of the nerf gun\ndef fire():\n    # start launch\n    global nerfFired\n    nerfFired = True\n    print('fired')\n\n# Build the three buttons called \"reset\", \"fire\" and \"quit\"\nframe = tk.Frame(master=window)\nframe.pack()\n\nresetb = tk.Button(\n    master=frame, text=\"reset\", relief=tk.RIDGE, \n    fg='black', bg='grey', height=2, width=5,command=reset)\nresetb.grid(row=0, column=0)\n\nfireb = tk.Button(\n    master=frame, text=\"fire\", relief=tk.RIDGE, \n    fg='black', bg='grey', height=2, width=5, command=fire)\nfireb.grid(row=0, column=1)\n\nquitb = tk.Button(\n    master=frame, text=\"quit\", relief=tk.RIDGE, fg='black', \n    bg='grey', height=2, width=5, command=window.destroy)\nquitb.grid(row=0, column=2)\n\n# This part of the code draws and animates\ndef run():\n    global targetX, nerfX, nerfVY, nerfY\n    canvas.delete(\"all\")\n    targetX += targetVX * delT\n    canvas.create_rectangle(\n        targetX, h-10, targetX+10, h, fill=\"green\")\n    if nerfFired:\n        nerfX += nerfVX * delT\n        nerfVY += nerfAY * delT\n        nerfY += nerfVY * delT\n    canvas.create_oval(\n        nerfX+5,h-nerfY+5, nerfX+15, h-nerfY+15, \n        fill=\"red\")\n    window.after(1, run)\n\n# Launch the window and start the animation\nwindow.after(1, run)\nwindow.mainloop()\nYes, that’s a long program! Now let’s point out some features:\nFirst, some features from the first half of the program: \nAnd some from the latter part:And some from the latter part: \n\n\n\n0.6 GUI vs command-line\nGUI stands for: Graphical User Interface.\nAnd is pronounced like “gooey”.\nThe difference between GUI and command-line programs:\n\nPrograms like helloworld.py from earlier printed plain text. These are Command-line programs.\nPrograms like whackamole.py bring up their own little window on your screen. These are called GUI programs.\nGUI programs are typically more complicated because one has to specify all the elements (buttons etc) of the interface.\nWe will spend quite a bit of time learning programming with simpler (albeit less exciting) command-line programs.\nHowever, we will occasionally work with GUI programs because they are visually more interesting, and demonstrate applications.\n\n\n\n0.8 Computer science: beyond programming\nIs computer science the same as programming?\nNot at all:\nProgramming is certainly a significant part, just as narrative non-fiction is a significant part of an English degree.        ⇒ But there’s much more to it.\nWhat else does a computer science degree feature? Typically:\n\nProgramming devices (units 9-10).\nAn understanding of the hardware (units 11-12).\nAlgorithms: the science in computer science.\nTheory: understanding fundamental theoretical limitations of computation.\nA deeper understanding of how computer systems work: networks, databases, operating systems.\n\nBut also electives among (to name a few):\n\nArtificial intelligence, machine learning, robotics, computer vision, natural language processing.\nDesign of interfaces.\nGraphics, animation, visualization.\nDigital humanities, computing for arts and social sciences.\nScientific computing.\nComputational X, where X=biology, physics, economics …\nEducational tools, health data systems.\nMedical devices, prosthetics, control of mechanical systems\n\n\n\n0.8 How to succeed as a student\nThe challenge in learning programming:\n1: it’s an alien world.        ⇒ Takes getting used to.\n2: it’s a mental skill        ⇒ Skills are acquired slowly, with much practice, and in fits and starts.\n3: there are confounding issues        ⇒ some knowledge of (regrettably) computerese needed.\n4: it’s easy to feel overwhelmed or intimidated        ⇒ your neighbor may appear to be “getting it” while you feel you don’t.\nWhat you should expect:\n\nYou can’t learn instantly        ⇒ You may have to see a concept multiple times to “get it”.\nYou may occasionally feel bewildered.\nThere are some things that can’t be understoodat this stage.        ⇒ Not enough background.\nIt’s deceptively easy to understand an idea when reading or viewing but devilishly harder to do it yourself.\n\nHow to succeed:\n\nMake progress every day        ⇒ Each module builds on previous modules        ⇒ Can’t afford to let anything slide.\nBe willing to put the effort        ⇒ Do all exercises, assignments etc.\nPractice being irrepressibly positive.\n\n\n0.6 Excercise: Create a PDF file (using Word, Google-docs, or anything like that) called module0.pdf in your module0.pdf folder. This document should contain: (1) a picture that says something about you (it need not be a picture of you, it could represent something iconic for you.) (2) a paragraph about yourself.\n\n\n\n\n\n\nNote\n\n\n\nWhat to rememeber about submitting work\n\n\n Next Module: Module 1"
  },
  {
    "objectID": "units/unit0/modules/module4.html",
    "href": "units/unit0/modules/module4.html",
    "title": "Module 4: Integers",
    "section": "",
    "text": "Home » Units » Module 4"
  },
  {
    "objectID": "units/unit0/modules/module4.html#objectives",
    "href": "units/unit0/modules/module4.html#objectives",
    "title": "Module 4: Integers",
    "section": "Objectives",
    "text": "Objectives\nBy the end of this module, for simple HelloWorld-like programs, you will be able to:\n\nCreate variable declarations.\nAssign values to variables by simple assignment, and print them out.\nDistinguish between integers in strings versus actual integers.\nDemonstrate ability to perform operations on integers for a desired output.\nSimplify expressions with constants to single value.\nEvaluate expressions with variables in them.\nConvert English descriptions of operations into expressions.\nMentally trace execution with expressions and calculations.\nMentally trace expressions and calculations inside for-loops.\nProduce desired output using for-loops and calculations.\nIdentify new syntactic elements related to the above.\n\nAnd, once we’ve worked with integers, we’ll also do some “number crunching”."
  },
  {
    "objectID": "units/unit0/modules/module4.html#first-an-analogy",
    "href": "units/unit0/modules/module4.html#first-an-analogy",
    "title": "Module 4: Integers",
    "section": "4.0 First, an analogy",
    "text": "4.0 First, an analogy\nSuppose we have boxes. Consider the following rules about “boxes”:\n\nEach box can store only one item.\n\n\n\nThe possible things that can be stored inside are called values.\nThus, at any given moment, a box’s value is whatever’s inside it.\nEach box has a unique name:\n\n\n\nThere is a cloning process that works like this: \n\nThe value inside one box is cloned.\nThe cloned value is placed inside another.\n\nThere is a strange shortcut notation to specify cloning: \n\nHere, the = (equals sign) does NOT mean “equals.”\nIt has been repurposed to mean “clone”, “copy,” or, in programming-language jargon, “assign”.\n\nHow to say it: “x is assigned the value in y”.\nImportant: Remember, a box can hold only one value at a time.\nThe technical term for our informal “box” is variable."
  },
  {
    "objectID": "units/unit0/modules/module4.html#integer-variables",
    "href": "units/unit0/modules/module4.html#integer-variables",
    "title": "Module 4: Integers",
    "section": "4.1 Integer variables",
    "text": "4.1 Integer variables\nWe’ll now start working with “boxes” (variables) that hold integers (whole numbers like 3, 17, 2097, but not numbers like 3.141).\n\nConsider this program:\n\ni = 5\nprint(i)\n\n4.1 Excercise: Type up the program in my_variable_example.py. Also save the file so that it can be submitted (Remember: you need to save the appropriate files for every such “type up” exercise). What does it print? Report what you see in module4.pdf.\n\nNow let’s examine key parts of this program:\nFirst, i is the name of a “box” (of sorts).\nThe term used for “box” is variable.    \n⇒ i is a variable.\nTo put something in a variable, we use assignment  \n⇒ with the repurposed = (equals) sign. \nWhen we print a variable, what gets printed is its value.   \n⇒ Thus, the number 5 gets printed \nImportant: What you see on printed out is the number 5 and NOT the letter i\nThus when you see print(i)you should think:\n\n“Hmmm, the print function is going to print the contents of variable i”.\n“I wonder what’s inside i?”\n“Let me look in the program to see what was the most recent value that got written into i”.\n\nFor example:\n\ni = 5\ni = 3\nprint(i)\n\n\n4.2 Excercise: Type up the above in my_variable_example2.py and confirm that 3 is what gets printed.\nBy way of explanation: \n\n\n4.3 Excercise: Is it possible to not have a value in a variable? Consider this program:\ni\nprint(i)\n Type up the program in my_variable_example3.py. What is the error? Answer in module4.pdf. (Remember, non-coding questions are to be answered in your module pdf, in this case: module4.pdf.)\nThus: when you make a variable, you need to put something in it. - Next, let’s look at assignment between variables: - This is the analogue of cloning between “boxes”.\n\nConsider this program:\n\ni = 5\nj = i     # The value in i gets copied into j\nprint(j)  # Prints 5\n\nWe say, in short, “i is assigned to j”.\n\n\n\n\n\n\n\nTip\n\n\n\nWe’ve used comments above to annotate and explain.\n\nWe’ll do this often, knowing that comments are not executed.\n\n\n\n\n\n4.4 Excercise: Consider this program:\ni = 5\nj = i\nprint(j)\nprint(i)   # Did i lose its value?\nType up the program in my_variable_example4.py and report what gets printed in module4.pdf.\nThe above example illustrates that the value in i gets copied into the variable j, which means that the value 5 is still in the variable i.\n\n\n4.5 Excercise: Consider this program:\ni = 5\nj = i\nk = j\nprint(k)\nTry to identify the output of this program just by mental execution. Type up the program in my_variable_example5.py and confirm.\n\n\n4.6 Excercise: Consider this program:\ni = 5\nj = i\ni = 0\nk = j\nj = 0\nprint(k)\n Try to identify the output of this program just by mental execution. Type up the program in my_variable_example6.py and confirm.\nNote that a copied value does not change if the original is changed: - For example, consider:\ni = 5\nj = i      # j now has 5\ni = 0      # We changed i here\nprint(j)   # j still has 5\n\nHere’s the line-by-line execution:\n\nThe first line puts the value 5 in variable i.\nThe second line copies the value in i (which is 5) into j. So j will have the value 5 as well.\nThe third line replaces the value 5 with value 0.\nj still has 5, so the fourth line will print 5.\n\n\n\n\n\n\n\n\nTip\n\n\n\n0 is an actual value, and is not “no value” or “nothing”.\n\n\n\n\n4.8 Excercise: Consider this program:\nType up the following lines of code in my_variable_example7.py:\ni = 5\nj = 6      \n\n# Add code between here\n\n# and here.\n\nprint(i)   # should print 6\nprint(j)   # should print 5\nAdd some lines of code with the objective of swapping the values in variables i and j. You will need a third variable to be used as a holding place. Thus, without directly assigning the number 5 to j or the number 6 to i, write code using a third variable to achieve the desired swapping of values."
  },
  {
    "objectID": "units/unit0/modules/module4.html#integer-operators",
    "href": "units/unit0/modules/module4.html#integer-operators",
    "title": "Module 4: Integers",
    "section": "4.2 Integer operators",
    "text": "4.2 Integer operators\nLet’s examine the familiar arithmetic operators +, -, *, /\n\nAddition: +\nSubtraction: -\nMultiplication: *\nDivision: /\nConsider this example with addition:\n\ni = 5\nj = 6\nk = i + j\nprint(k)\n\nWhat happens during execution: \n\nThe values in i and j are added.\nThe resulting value goes into variable k.\n\nA long-ish way of saying this aloud:      \n⇒ “k is assigned the sum of the values of i and j”\nA shorter way:      \n⇒ “k is assigned i plus j”\nHere’s an example with multiplication and division:\n\n\ni = 5\nj = 6\nk = i * j\nprint(k)      # prints 30\nm = i / j\nprint(m)      # what does this print?\nn = i // j\nprint(n)      # what does this print?\n\n4.10 Excercise: Type up the above in my_variable_example8.py. What is the value of n printed? Change i to 21. What is the value of n printed? Answer in module4.pdf. Submit your code with i set to 5.\nInteger division: - In math, we learned that 1/4 = 0.25 and 21/6 = 3.5.\n\nThis remains true in Python when we do something like\n      i = 21\n      j = 6\n      m = i / j\nOn the other hand, if we wish to perform integer division, we can use the integer division operator:\n      i = 21\n      j = 6\n      m = i // j\nThat is, the result is truncated down to the nearest integer.\n\nExample: 3 // 2 becomes 1 because 1.5 gets truncated to 1.\nExample: 15 // 4 becomes 3 because 3.75 gets truncated to 3.\n\nInteger division is useful when we want to do integer arithmetic."
  },
  {
    "objectID": "units/unit0/modules/module4.html#expressions-and-operator-precedence",
    "href": "units/unit0/modules/module4.html#expressions-and-operator-precedence",
    "title": "Module 4: Integers",
    "section": "4.3 Expressions and operator-precedence",
    "text": "4.3 Expressions and operator-precedence\n\nConsider the following program:\n\ni = 5\nj = 6\nk = i*j - (i+1)*(j-1)\nprint(k)\n\n4.11 Excercise: Type up the above program in my_expression_example.py. What does it print? Answer in module4.pdf.\nAbout expressions:\n\nAn expression combines constants (like 1, above), and variables using operators.\nExample: i*j - (i+1)*(j-1).\nThe above expression is really equivalent to: (i*j) - ((i+1) * (j-1)). Here, we added some clarifying parentheses.\nOperator precedence allows us to reduce the number of clarifying parentheses.\nPython precedence follows standard precedence in math: /, *, +, -.\nYou might remember the precedence via the acronyms BODMAS or PEMDAS. (Look it up.)\nThe above expression is NOT the same as: i*j - i+1*j-1.\nAlso, note the change of whitespace:\n\nWe could have written k = i * j - (i + 1) * (j - 1).\nBut k = i*j - (i+1)*(j-1) is easier to read.\n\n\nLet’s dive a bit deeper into precedence and do some examples:\n\nWe’ll use the four operators: add or +, subtraction or -, multiplication or *, and division or /.\nWe’ll use plain ol’ numbers to illustrate.\n\n\n\n\n\n\n\nTip\n\n\n\nThe key to working them out is to use extra parentheses in the right way.\n\n\n\nThe PEMDAS rule:\n\nFirst apply Parentheses, then Exponents, then Multiplication and Division, and then Addition and Subtraction.\n\nExample: 3 + 2*4\n\nHere, we apply 2*4 to give 8\nThen do 3 + 8 to give 11.\nApplying extra parenthesis to 3 + (2*4) makes it clear.\n\nExample: 3(24/3-23)\n\nFirst, work out what’s inside the parens (the P of PEMDAS):\n\nDo div to 24/3 and mult to 2*3 to get (8 - 6)\nThis gives (2)\n\nNow go out and see that we need to do 3*(2)\nWhich gives 6.\nUsing extra parens and spacing makes it clear: 3 * ( (24/3) - (2*3) )\n\nExample: 1 + ( (4 - 1) * 8) / 6\n\nDo the innermost parens first: (4 -1) = 3\nWhich results in 1 + (3 * 8) / 6\nThen the next parens to give: 1 + 24/6\nThen the D in PEMDAS: 1 + 4\nResult: 5\n\n\n\n\n4.12 Excercise: What does the expression i*j - i+1*j-1 evaluate to when i=7 and j=3? Answer in module4.pdf."
  },
  {
    "objectID": "units/unit0/modules/module4.html#more-about-expressions-and-assignment",
    "href": "units/unit0/modules/module4.html#more-about-expressions-and-assignment",
    "title": "Module 4: Integers",
    "section": "4.4 More about expressions and assignment",
    "text": "4.4 More about expressions and assignment\nThe remainder operator:\n\nThe expression 10 % 3 is “the remainder when 10 is divided by 3”.\nThus 10 % 3 is 1.\nSimilarly 11 % 4 is 3.\nThe remainder operator is sometimes called modulo, as in “ten modulo 3 is 1”\n\nConsider this example:\ni = 14\nj = -6\nk = i % (-j)\nprint(k)\n\n4.14 Excercise: Can you mentally execute and identify what’s printed? Type up the above in my_expression_example2.py to confirm. Report the value in module4.pdf.\nOne way to know whether one number cleanly divides another is to apply the % (remainder) operator.\nConsider this program:\nj = 10\nfor i in range(1, j):\n    k = j % i\n    print(k)\n\n\n4.15 Excercise: Can you mentally execute and identify what’s printed? Type up the above in my_expression_example3.py to confirm. Then change j to 11 and run the program. Report the output in each case in module4.pdf. When submitting the code, leave j as 11.\n\n\n\n\n\n\nNote\n\n\n\n\nIn the above exercise we systematically obtained the remainder when dividing 10 (the value of j) by every possible number less than 10.\nWhenever the output is 0 in some iteration, we know 10 % i is 0 for that iteration.\nThis means i divides 10 cleanly (with no remainder).\nFor example 10 % 5 is 0.\nWhenever a number j has nothing less than j that divides j cleanly, the number is called a prime number.\nExamples of prime numbers: 7 and 11.\nExamples of non-prime numbers: 10 and 15\nThe notion of a prime number may seem like an esoteric topic, suitable for a dinner conversation with mathematicians. But it turns out to have immense practical value: much of cryptography is based on properties of numbers that can be cleanly divided by only two prime numbers.\n\n\n\nNow we’ll look at a strange (initially) but very useful type of assignment:\nConsider this program:\ni = 8\ni = i + i/2\nprint(i)\n\nPrior to evaluating the expression, i has value 8.\nOn the right side, the current value of i is used to evaluate the expression.       \n⇒ Thus, the expression evaluates to (8 + 8/2) = 12.\nThis evaluated value then goes into variable i.       \n⇒ After the assignment, i has the value 12.\n\nLet’s use this to compute the sum of numbers from 0 to 10:\ns = 0\nfor i in range(0, 11):\n    s = s + i\nprint(s)\n\n\n4.17 Excercise: Trace the changing values of s in the above program using the following kind of table:\n\nWrite up the table in module4.pdf.\n\n\n\n\n\n\nNote\n\n\n\nIn this and other tracing exercises involving a table, you can simply draw the table by hand and include a picture. (That is, you don’t have to spend time on making tables inside Word.)\n\n\nConsider this program:\nN = 5\ns = 0\nfor i in range(1, N+1):\n    s = s + (2*i - 1)\nprint(s)\n\nThe program prints the sum of the first N odd numbers.\nRecall from earlier that as i goes through 1, 2, 3, … (2*i-1) evaluates as successive odd numbers 1, 3, 5, …\n\n\n\n4.18 Excercise: Trace (in module4.pdf) the values of i and s in the program above. Then, in my_expression_example4.py, edit the code to create an outer loop that varies N from 1 to 10. That is, make N a new for-loop variable that ranges between 1 and 10 (inclusive), and ensure that you properly indent the inner (nested) loop that uses i. What pattern do you observe in the output?"
  },
  {
    "objectID": "units/unit0/modules/module4.html#problem-solving-and-pseudocode",
    "href": "units/unit0/modules/module4.html#problem-solving-and-pseudocode",
    "title": "Module 4: Integers",
    "section": "4.5 Problem solving and pseudocode",
    "text": "4.5 Problem solving and pseudocode\nSuppose we were given the following problem: write a program to print the first N odd numbers.\nWe’ll solve it in the following steps:\n\nFirst, let’s sketch out a “program-like” outline (not a real program):\nN = 10      \nfor i ranging from 1 to N:\n    Calculate the i-th odd number\n    Print it\nThis kind of rough outline is called pseudocode       \n⇒ We’re meant to do this on paper, prior to programming.\nPseudocode looks a little like code, but is half-English.\nFor any given i, the i-th odd number is:       \n2*i - 1.\nNow let’s put this together into a program:\n\nN = 10\nfor i in range(1, N+1):\n    k = (2*i - 1)\n    print(k)\n\n4.20 Excercise: Trace (in module4.pdf&lt;) the values of i&lt; and k&lt; in the program above. This is what you should be able to domentally during mental execution."
  },
  {
    "objectID": "units/unit0/modules/module4.html#a-problem-solving-example-with-variables-and-nested-for-loops",
    "href": "units/unit0/modules/module4.html#a-problem-solving-example-with-variables-and-nested-for-loops",
    "title": "Module 4: Integers",
    "section": "4.6 A problem-solving example with variables and nested for-loops",
    "text": "4.6 A problem-solving example with variables and nested for-loops\nWe’ll solve the following problem: for any given n, compute       \n1 + 21 + 22 + 23 + … + 2n\nThat is, the sum of consecutive powers of 2.\nAs a first step, let’s see if we can use a loop to compute a single power of 2:\n\nSuppose we wish to compute 2k for some k.\nWe know that       \n2k = 222 … *2        (k times)\nThus, what we could is:       \nStart with p = 1       \nMultiply by 2: p = p * 2       \nMultiple that result by 2: p = p * 2       \n… etc\nIn pseudocode:\np = 1  \nfor i ranging from 1 to k:\n  p = p * 2\nLet’s put this into code and test:\nk = 10\np = 1\nfor i in range(1, k+1):\n    p = p * 2\nprint(p)\n\n\n4.21 Excercise: Trace the changing values of p in the above program using a table (in module4.pdf). Then, type up the above program in my_powerof2.py to confirm.\n\nNext, let’s look at pseudocode for the sum of powers (our original problem):\ns = 1    \nfor k ranging from 1 to n:\n    Compute k-th power of 2\n    Accumulate in s\nPrint s\nNow, let’s put this all together:\nn = 5\ns = 1\nfor k in range(1, n+1):\n    p = 1\n    for i in range(1, k+1):\n        p = p * 2\n    s = s + p\nprint(s)\nLet’s point out a few things.\n\nFirst, let’s have our eyes look over the outer-loop and not focus on the details of the inner loop: \nNow look inside the body of the outerloop: \nTry to get a feel for how it executes by looking at the first iteration of the outerloop: \n\n\n\n\n4.23 Excercise: Make a table with columns labeled k, i, p and s and trace the program, filling in the table step-by-step (in module4.pdf).\n\n\n4.25 Excercise: Try a few other values of n, e.g., n=3 or n=4. Try to guess the mathematical formula for 1 + 21 + 22 + 23 + … + 2n (in module4.pdf)\n\n\n\n\n\n\nTip\n\n\n\nAdd 1 to the sum-of-powers of 2."
  },
  {
    "objectID": "units/unit0/modules/module4.html#shortcut-operators",
    "href": "units/unit0/modules/module4.html#shortcut-operators",
    "title": "Module 4: Integers",
    "section": "4.7 Shortcut operators",
    "text": "4.7 Shortcut operators\nRecall the integer-sum program:\ns = 0\nfor i in range(0, 11):\n    s = s + i\nprint(s)\nWe can write this using the “shortcut addition” operator += as follows:\ns = 0\nfor i in range(0, 11):\n    s += i\nprint(s)\nThus, s += i is the same as s = s + i\nOne can read s += i as “add i to what’s already in s, and store the result in s”.\nThis can be applied to the other operators as well:\ns -= i         # Same as s = s - i\np *= 2         # Same as p = p * 2\nd /= 2         # Same as d = d / 2\n\n4.26 Excercise: In my_sum_powerof2.py rewrite the example code that computes the sum of power of 2, using shortcut operators where possible."
  },
  {
    "objectID": "units/unit0/modules/module4.html#when-things-go-wrong",
    "href": "units/unit0/modules/module4.html#when-things-go-wrong",
    "title": "Module 4: Integers",
    "section": "4.8 When things go wrong",
    "text": "4.8 When things go wrong\nAs you might imagine, there are many ways to inadvertently create errors.\nIn each case below, first try to identify the error just by reading. Then, type up the program to confirm.\n\n4.27 Excercise: What is the error in this program?\ni = j\nj = 4\nprint(i)\nType it up in error1.py to confirm.\n\n\n4.28 Excercise: What is the error in this program?\ni = 4\nj = 3\nk = ( (i + j) * (i - j) / 2\nprint(k)\nType it up in error2.py to confirm.\nWe’ll now see a different kind of error:\nn = 5\nfor i in range(1, n+1):\n    k = n / (n - i)\n    print(k)\nType it up in error3.py to confirm. Then trace through the program at each iteration in module4.pdf.\nThe above is an example of a runtime error:\n\nThe code itself is correctly written in that there are no issues with breaking the rules of the language.\nHowever, when i is 0, you can’t divide by 0.\nThis causes a runtime error, meaning the program runs fine until the particular occurence of divide-by-zero."
  },
  {
    "objectID": "units/unit0/modules/module4.html#python-files-vs-module-pdf",
    "href": "units/unit0/modules/module4.html#python-files-vs-module-pdf",
    "title": "Module 4: Integers",
    "section": "4.9 Python files vs module pdf",
    "text": "4.9 Python files vs module pdf\nImportant:\n\nBy now it should be clear what you type into a Python file (ends with .py) verses what goes into your module pdf.\nCode goes into the specified Python file (example: error3.py) and all other answers go into your module pdf (numbered by module#, such as: module4.pdf).\nYour module pdf (a single pdf per module) will have all the non-coding answers for a module. Whereas, a module can have many different Python files.\nThus, in future modules, we will only specify the Python filename with the understanding that you know how to name your module pdf."
  },
  {
    "objectID": "units/unit0/modules/module4.html#a-peek-at-the-future",
    "href": "units/unit0/modules/module4.html#a-peek-at-the-future",
    "title": "Module 4: Integers",
    "section": "4.10 A peek at the future",
    "text": "4.10 A peek at the future\nLet’s now revisit some earlier code hello_gui.py and apply what’ve learned about integers, arithmetic, and for-loops: \nNext, consider this program that uses a for-loop to plot points:\nfrom drawtool import DrawTool \nimport math\n\ndt = DrawTool()\ndt.set_XY_range(0,10, 0,10)\n\nfor i in range(0, 6):\n    j = 2*i + 1\n    dt.draw_point(i, j)\n\ndt.display()\n\n4.30 Excercise: Download drawtool.py into your module4 folder. Then, type up the above in my_plot_points.py, and run.\nLet’s point out:\n\nLet’s focus on the parts we recognize (the for-loop): \n\nSo, when i is 0, j is calculated as 1\nThis plots the point (0,1).\nThen, when i is 1, j becomes 3, which results in the point (1,3).\n… and so on.\n\nThe points are the dots shown in the plot.\nWhen you downloaded drawtool.py, you downloaded another Python program into the same folder.\n\nThis is a program that provides drawing and plotting features.\nWe’ve used one of its features here (plotting points), and will use drawtool.py again in the future.\n\nNotice that the plotted points are along a straight line, implying a linear relationship between i and j.\nWe will occasionally write programs that work with numbers and quantitative concepts. As a result, we’ll encounter mathematical ideas in a different way, through programming."
  },
  {
    "objectID": "units/unit0/modules/module4.html#meta",
    "href": "units/unit0/modules/module4.html#meta",
    "title": "Module 4: Integers",
    "section": "4.11 Meta",
    "text": "4.11 Meta\nAnother in our series of occasional “meta” sections that will step back from the material to comment on how we can learn better.\nThis was a loooong module with lots of exercises and details. Let’s review:\n\nWe introduced the all-important concept of a variable along with the sense that there’s a “place” in the computer for each variable.        ⇒ The “place” is really in the memory (also called RAM) of the computer.\nAlong with variables is the notion of assignment, which means “copying the value in one variable into another variable”.\n\n\n\n\n\n\n\nTip\n\n\n\nAssignments are amongst the most common of statements in everyday code.\n\n\n\nWhen a variable is of a numeric type like integers, we also need to go over basic operators and show examples.\nFurther complications arose when the operators have variations.\nSince we were on the topic of integers, we took this opportunity to learn how to do some number-crunching.\nWhen we got to nested loops, it got tricky following the values of variables through multiple nested loops.\n\nSo, if you felt a bit overwhelmed, that’s perfectly understandable. If you have to go back to some of the material to review or try some exercises again, that’s fine. You’re going to get better at this!\n Previous Module: Module 3 Next Module: Module 5"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CS 1012: Introduction to Programming with Python",
    "section": "",
    "text": "Welcome to the section of CS-1012!\n\n\n\n\n\n\nCource Content\n\n\n\n\n\nThe course material is sourced from Prof. Simha’s webpage: https://www2.seas.gwu.edu/~simhaweb/onlinecs1012/\n\n\n\nBecause this is an course, it will operate differently than a regular course. In particular:\n\nEven though the course is, we will meet three times: once at the beginning to get you going, once in the middle to check in, and once at the end for the in-class final exam.\nMost of our communication to you will be by email or by announcements in Blackboard.\nWhen you need to communicate with us, please follow the specific instructions outlined in Blackboard.\nWhen you submit work, please follow the specific instructions outlined in Blackboard for submitting work.\nThe coursework page outlines the schedule. It is YOUR job to keep to the schedule and submit work accordingly.\nAs you’ll see you’ll be accompanied by four students who will be doing the course with you. These four have no background in computer science or engineering whatsoever, demonstrating that anyone can learn CS with sufficient enthusiasm.\nStart by reading the About section. Then, await an email that will:\n\nSchedule the first meeting.\nDescribe the first homework to submit."
  },
  {
    "objectID": "units/unit0/modules/module1.html",
    "href": "units/unit0/modules/module1.html",
    "title": "Module 1: A few more getting-started examples",
    "section": "",
    "text": "Home » Units » Module 1"
  },
  {
    "objectID": "units/unit0/modules/module1.html#objectives",
    "href": "units/unit0/modules/module1.html#objectives",
    "title": "Module 1: A few more getting-started examples",
    "section": "Objectives",
    "text": "Objectives\nBy the end of this module you will be able to:\n\nLearn what a comment is, and how to write them.\nWrite programs with multiple prints\nEscape sequences\nIdentify new syntactic elements.\nUnderstand case-sensitivity.\nWrite a function and examine proper indentation.\nFind and fix errors"
  },
  {
    "objectID": "units/unit0/modules/module1.html#comments",
    "href": "units/unit0/modules/module1.html#comments",
    "title": "Module 1: A few more getting-started examples",
    "section": "1.0 comments",
    "text": "1.0 comments\nA comment is like a note-to-self that you include directly in a program as a way to explain something to yourself for later, or to someone else who reads your program.\n# This is a comment\n      # This is one too, but not recommended \n\nprint('Something')      # And so is this\nLet’s explain:\n\nA comment begins with a and ends at the end of the line.\nAnything written as a comment is not treated by your computer as a “command” or as programming intent.\nThus, as far as programming goes, the above program is as good as:\n\nprint('Something')\n\nYou can insert comments in various places in a program: \n\n\n1.1 Excercise: Under your unit0, create a module1 folder (if you haven’t already), and then write up the above in my_comments.py. Fix the second comment to start at the beginning of the line, and add an entirely new comment line of your own.\nSometimes one needs a comment to spill over multiple lines, as in\n# I wrote this program at midnight\n20 seconds before the deadline\nprint('Something') \nNotice the missing # in the second line of the comment.\n\n\n1.2 Excercise: Write up the above in comment_error.py. Remember to save the file (and do this for every exercise in the future that involves a program). What is the error displayed when you try to run the program? Write the error in your module1.pdf file."
  },
  {
    "objectID": "units/unit0/modules/module1.html#whitespace",
    "href": "units/unit0/modules/module1.html#whitespace",
    "title": "Module 1: A few more getting-started examples",
    "section": "1.1 Whitespace",
    "text": "1.1 Whitespace\nConsider the following program:\nprint   (  'Hello World!'     ) \nNotice the spaces inserted in various places.\n\n1.3 Excercise: Write up the above in whitespace_example.py. Does the program run? Write your answer in module1.pdf file. Remember: if it’s not clear where to write your answer, write it in your module pdf (for this module that’s module1.pdf)\nConsider this variation\n  print('Hello World!')\n(Two spaces before print).\n\n\n1.4 Excercise: Write up the above in whitespace_example2.py. What is the error produced?\nFinally, look at:\nprint('Hello     World!') \n(Extra spaces between Hello and World.)\n\n\n1.5 Excercise: Write up the above in whitespace_example3.py. What is printed out? Write your answer in module1.pdf\nLet’s point out a few things:\n\nSome kinds of whitespace, even if ill-advised, is permitted.\nWhen starting a line of code, proper indentation is expected, which is why we got an error when we indented the line starting with print\nThe extra spaces between Hello and World are perfectly acceptable if the goal is to print them. Printing accepts whatever spaces you want printed."
  },
  {
    "objectID": "units/unit0/modules/module1.html#strings",
    "href": "units/unit0/modules/module1.html#strings",
    "title": "Module 1: A few more getting-started examples",
    "section": "1.2 Strings",
    "text": "1.2 Strings\nA string in Python is a sequence of letters, digits, or symbols (like $ or *) surrounded by either\n\nA pair of double quotes, as in: \"Hello World!\"\nA pair of single quotes as in: 'Hello World!'\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhichever quote you use to start a string must be used to end the string.\nThe ending quote must be on the same line as the starting quote.\nThere are special techniques to handle long strings that need to spill over multiple lines (which we’ll see below).\nThis raises some questions:\n\nIs it possible to print a single line but with multiple print statements?\nHow does one print a quote?\n\n\n\n\nFirst, note that we can use single or double quotes for different strings in the same program:\nprint('Hello')\nprint(\"World!\") \n\n1.6 Excercise: Confirm that Hello and World! get printed on two lines by writing the above in my_string_example.py\nA print statement prints the string within parenthesis and then goes to the next line of output, which is why we see World! on the next line.\nTo keep printing on the same line:\nprint('Hello', end=' ')\nprint('World!')\n\n\n\n\n\n\nNote\n\n\n\nWe’ve reverted to using single-quotes for all strings, which will be our preference.\n\n\n\n\n1.7 Excercise: Confirm by writing the above in my_string_example2.py.\nWe’ll now go the other way and have a single string itself contain a directive to spill over to the next line.\nprint('Hello\\nWorld!') \nNotice the backslash \\ followed by n inside the string: 'Hello&lt;b&gt;\\n&lt;/b&gt;World!'\n\n\n1.8 Excercise: Write up the above my_string_example3.py. What is the output? Write your answer in module1.pdf\nStrings can embed special so-called escape sequences that begin with backslash.\nThis will give us one way to print a quote:\nprint('My friend\\'s friend\\'s dog\\'s friend')\nAnother way is to use one set of quotes to delimit the string that are different from the ones used within:\nprint('My friend\\'s friend\\'s dog\\'s friend')\nprint(\"bit my friend's dog's ankle\")\nprint('who yelped \"owww\"')\nHow does one print a backslash itself? By using a double backslash:\nprint('The backslash character, \\\\, is less intimidating now')\n\n\n1.9 Excercise: Write a program called practice_escaping.py that prints out\n  \"    \"   \\\\\\\n  \"    \"    \\    \n  \"\"\"\"\"\"    \\    \n  \"    \"    \\    \n  \"    \"   \\\\\\  \n\nAnother use of backslash: to make long strings\n\nSometimes we need to type in a really long string.\nThe following does NOT work:\n\nprint('An Ogden Nash poem:')\nprint('The camel has a single hump; \nThe dromedary, two; \nOr else the other way around. \nI’m never sure. Are you?')\n\n\n1.11 Excercise: Write a program called my_string_example4.py with the above program and run it. What is the error you observe? Write your answer in module1.pdf\nTo spread a single string over multiple lines, one uses a triple quote as in:\nprint('An Ogden Nash poem:')\nprint('''The camel has a single hump; \nThe dromedary, two; \nOr else the other way around. \nI’m never sure. Are you?''')\n\n\n1.12 Excercise: Write a program called my_string_example5.py with a 5-line limerick.\nEmpty strings: - It is possible to not have anything in a string, as in:\nprint('')\n\n\n\n\n\n\nNote\n\n\n\nThere are no letters, digits or anything between the two single quotes above.\n\n\n\nSuch a string is called an empty string.\nOdd as it may seem, empty strings are useful (we’ll see later) when you want to add strings to make a longer string."
  },
  {
    "objectID": "units/unit0/modules/module1.html#case-sensitivity",
    "href": "units/unit0/modules/module1.html#case-sensitivity",
    "title": "Module 1: A few more getting-started examples",
    "section": "1.3 Case sensitivity",
    "text": "1.3 Case sensitivity\nWhat if we had used uppercase P instead of lowercase p in print?\nprint('Hello World!')\n\n1.13 Excercise: Write up the above program in case_error.py and run it. What is the error you get?\nWrite your answer in module1.pdf.\nWhat if we changed the case inside a string?\nprint('helLo WoRLd!')\n\n\n1.14 Excercise: Write up the above program in my_string_example6.py and run it to see if it works.\nPython is case sensitive but strings are like data inside programs, which means they can be whatever we like.\n\nThe two strings 'Hello World!' and 'helLo WoRLd!' are fine as two different strings, if that’s we want.\nHowever, Python has only one print and so it won’t recognize Print (with capital P)."
  },
  {
    "objectID": "units/unit0/modules/module1.html#a-peek-at-the-future",
    "href": "units/unit0/modules/module1.html#a-peek-at-the-future",
    "title": "Module 1: A few more getting-started examples",
    "section": "1.4 A peek at the future",
    "text": "1.4 A peek at the future\nWe will occasionally jump ahead and present an example of a program that does something advanced, just so you get a feel for what’s coming.\nWith these examples, we’ll only ask you to type up the program and run the program.\nAnd then we’ll point out a few features, just so that you get acquainted with features that you’ll eventually encounter.\nimport tkinter as tk\n\nwindow = tk.Tk()\ncanvas = tk.Canvas(master=window, width=500, height=400)\ncanvas.pack()\n\nfor i in range(1, 10):\n    fontSize = i * 20\n    fontStr = 'Times ' + str(fontSize) + ' italic bold'\n    startx = 200 + 10 * i\n    starty = 20 + i * 20\n    canvas.create_text(\n        startx, starty, text=\"Hello\", font=fontStr, fill='grey')\n\nwindow.mainloop()\n\n1.14 Excercise: Write up the above program in hello_gui.py being careful to type it in exactly as shown above, paying attention to every keystroke. Run it to get something like:  If something went wrong with the typing, you can instead download hello_gui.py but only after giving the typing a good try. \nNow let’s point out a few features of the program, and we’ll focus on the middle section: \nOur belief is that by showing you bits and pieces of advanced code, you’ll be primed to absorb these concepts when we work through them.\nOne of the most important things to observe about is that some code is indented:"
  },
  {
    "objectID": "units/unit0/modules/module1.html#a-reminder-about-computerese",
    "href": "units/unit0/modules/module1.html#a-reminder-about-computerese",
    "title": "Module 1: A few more getting-started examples",
    "section": "1.5 A reminder about computerese",
    "text": "1.5 A reminder about computerese\nAs you complete Module 1 and ready that for submission you might want to review: - Did you make your module1 folder? Did you ensure that the m in module1 is lowercase and that there’s no space module and 1? - Are your Python programs from this module in that folder? - Did you make your module1.pdf in this folder? Does it have the non-coding questions answered within? - Do you recall how to make a zip?\nIf it’s a bit hazy, please make sure to review from the material on computerese from Module 0.\nHere’s more information about submitting Module 1\n Previous Module: Module 0 Next Module: Module 2"
  },
  {
    "objectID": "units/unit0/modules/module2.html",
    "href": "units/unit0/modules/module2.html",
    "title": "Module 2: Functions: a first look",
    "section": "",
    "text": "Home » Units » Module 2"
  },
  {
    "objectID": "units/unit0/modules/module2.html#objectives",
    "href": "units/unit0/modules/module2.html#objectives",
    "title": "Module 2: Functions: a first look",
    "section": "Objectives",
    "text": "Objectives\nBy the end of this module, for simple HelloWorld-like programs, you will be able to:\n\nDemonstrate function calls.\nUse mental tracing to identify output without execution.\nAdd numbered comments to show an execution trace.\nIdentify and correct syntax errors related to the above objectives."
  },
  {
    "objectID": "units/unit0/modules/module2.html#an-example-with-function-calls",
    "href": "units/unit0/modules/module2.html#an-example-with-function-calls",
    "title": "Module 2: Functions: a first look",
    "section": "2.0 An example with function calls",
    "text": "2.0 An example with function calls\nConsider the following program:\n# define a function we'll use later\ndef print_big_M():    \n    print('*   *')\n    print('** **')\n    print('* * *')\n    print('*   *')\n    print('*   *')\n\n# define another one we'll use later\ndef print_big_O():    \n    print('*****')\n    print('*   *')\n    print('*   *')\n    print('*   *')\n    print('*****')\n\n# Print MOO using the above defined functions\nprint_big_M()\nprint_big_O()\nprint_big_O()\n\n2.1 Excercise: Type up the above in animal_sounds.pyand run it. Also save the file so that it can be submitted (You will need to save the appropriate files for everysuch “type up” exercise).\nLet’s point out a few things: \n\nLet’s start by distinguishing between a function definition (which uses def and merely tells Python what the function is about), and invocation (which asks Python to execute the function at that moment).\n\nA function definition is a piece of code that begins with the word def\nA function definition is sometimes also called function declaration.\nA function definition does not execute the code immediately.\nInstead it’s like saving in one place a bunch of instructions that can be invoked with just the name of the function.\nThis saves writing lots of code if a group of code can begiven a name (in this case, a function name).\n\nA function definition has 5 elements: \nA function with a given name is defined just once.\nA function invocation merely uses the name, along with parentheses:\n\nprint_big_M()\nWe’ll later see examples where some things can go between the parens.\n\nWhile a particular function is defined once, it can be used any number of times:\n\nIn fact, that is the whole purpose of defining functions.\nEach use of a function is a single line of code, which saves us the trouble of rewriting all the code that was inside the function for each time we need it.\n\nFunction definitions also help isolate code so that one doesn’t have to see or understand what’s inside to use it.\nWe’ve already used such a function before: the print function.\n\nThe printfunction is defined internal to Python.\nWe don’t type its definition, nor do we see it.\nWe just use it as often as we like.\n\nImportant: Please pay careful attention to indentation\n\nThe line that begins with def should NOT be indented.\nOther lines that belong to the function should be indented.\nThere are other forms of indentation that we’ll point out as we proceed - they’re all important.\n\n\n\n\n\n2.3 Exercise: Write your own animal sound that uses one function at least thrice with an exclamation mark at the end, e.g. print the big version of BAAA!. Write your code in my_pet_sound.py. Once your program is working, say the sound out aloud to celebrate. (Why not?)\nNext, let’s see how functions “work” by making a small change to the program:\ndef print_big_M():\n    print('*   *')\n    print('** **')\n    print('* * *')\n    print('*   *')\n    print('*   *')\n\ndef print_big_O():\n    print('*****')\n    print('*   *')\n    print('*   *')\n    print('*   *')\n    print('*****')\n\nprint('Step 1')\nprint_big_M()\nprint('Step 8')\nprint_big_O()\nprint('Step x')\nprint_big_O()\nprint('Step y')\n\n\n2.4 Exercise: Type up the above in animal_sounds2.py and run it.\nLet’s explain using an analogy: \n\nWe’ll use the analogy of a house to describe a program and its parts (the functions).\nA program’s execution starts at the very top.\nIn the above case, there are a number of definitions:\n\nDefinitions are merely “processed” but not executed.\nIt’s understood that the definitions may be invoked later.\nIn our house analogy, we walk past these “rooms” to the main lobby.\n\nThe first real line of code is the print('Step 1')statement.\n\nThink of this section of code as the “main lobby”.\n\nAfter this, we see the line (also a command) print_big_M()\n\nThis is an instruction that causes the computer to “go to the print_big_M()room”.\nWe then head to that room and start executing commands in there.\n\nThus, the third command that gets executed is print('*   *')\nWe’re still in the room with more commands to go, and the next one (4th so far) is print('** **')\nContinuing, we execute the last line in the room, which will make this the 7th one executed.\nAfter we leave the “room”, and this is important, we continue execution after the invocation that brought us to the room.\n\n\n\n2.5 Exercise: Type up the above in animal_sounds2.py and run it.\nAt which step (which step number) do we execute the last line in print_big_O? And then, at which step do we enter print_big_O the second time and print its first line? In animal_sounds2.py replace x and y with the correct step number. Don’t forget: non-coding responses to exercises go into module2.pdf (one PDF per module)."
  },
  {
    "objectID": "units/unit0/modules/module2.html#calling-functions-from-other-functions",
    "href": "units/unit0/modules/module2.html#calling-functions-from-other-functions",
    "title": "Module 2: Functions: a first look",
    "section": "2.1 Calling functions from other functions",
    "text": "2.1 Calling functions from other functions\nConsider this program:\ndef print_big_M():\n    print('*   *')\n    print('** **')\n    print('* * *')\n    print('*   *')\n    print('*   *\\n')\n\ndef print_big_O():\n    print('*****')\n    print('*   *')\n    print('*   *')\n    print('*   *')\n    print('*****\\n')\n\ndef print_two_big_Os():\n    print_big_O()\n    print_big_O()\n\nprint_big_M()\nprint_two_big_Os()\n\nYes, we can write our functions that call our own functions.\nIncidentally, did you notice the escape sequences?        ⇒ We improved the output.\n\n\n2.7 Exercise: Type up the above in animal_sounds2.py and run it.\nUse this idea to rewrite your own animal sound in a file called my_pet_sound2.py. That is, add an additional function to your earlier program my_pet_sound.py that is analogous to print_two_big_Os() above.\n\nOnce again, let’s trace through some steps: \n\n\n\n2.8 Exercise: Look at the example above. What step number is represented by the question mark (?) next to the second print_big_O() inside the print_two_big_Os() function? What line in the program represents step 15? Write your answer in module2.pdf. Remember: if it’s not clear where to write your answer, write it in your module pdf (for this module that’s module2.pdf).\n\n\nMental execution:\nWe will use the term mental execution for the above exercise of tracing through the execution without actually compiling and running the program.\n\n\n\n\n\n\n\nNote\n\n\n\nMental execution is extremely important in developing programming skill        ⇒ Please be sure to practice this with every program you read or write.\n\n\n\nWe can’t emphasisize this enough. Really.\nRemember:\n\nExecution starts at the top of a program and goes downwards.\nFunction definitions are processed (understood) but not executed.\nWhen a function are invoked, execution “goes” into the function to execute the code in there."
  },
  {
    "objectID": "units/unit0/modules/module2.html#more-about-functions",
    "href": "units/unit0/modules/module2.html#more-about-functions",
    "title": "Module 2: Functions: a first look",
    "section": "2.2 More about functions",
    "text": "2.2 More about functions\nAbout function names:\n\nConsider the function name print_big_M.\nThis is a name we chose.\nWe could just as easily have called it my_crazy_function:\n\ndef &lt;b&gt;my_crazy_function&lt;/b&gt;():\n    print('*   *')\n    print('** **')\n    print('* * *')\n    print('*   *')\n    print('*   *\\n')\n\ndef print_big_O():\n    print('*****')\n    print('*   *')\n    print('*   *')\n    print('*   *')\n    print('*****\\n')\n\ndef print_two_big_Os():\n    print_big_O()\n    print_big_O()\n\n# Use the different name:\nmy_crazy_function()    \nprint_two_big_Os()\n\nIn other words, the compiler does not look into the English meaning of function names.\nWe choose function names to help us read programs.\n\nBeware of name clashes: - Consider the following program (that has a mistake):\ndef print_big_M():\n    print('*   *')\n    print('** **')\n    print('* * *')\n    print('*   *')\n    print('*   *\\n')\n\ndef print_big_M():      # A mistake! We meant to have typed\n    print('*****')      # print_big_O()\n    print('*   *')\n    print('*   *')\n    print('*   *')\n    print('*****\\n')\n\n# What happens now?\nprint_big_M()\n\nIn this example, we have functions with different content but with the same name.\n\n\n2.10 Exercise: Implement the above in name_clash.py and describe what happens in module2.pdf.\n\nWhat we see is that the second definition replaces the first.\nThe program runs but this error is not identified as such by the language. Instead, we need to be careful not to unintentionally make such a mistake.\n\nThe order of function invocation matters. For example, consider:\ndef print_big_M():\n    print('*   *')\n    print('** **')\n    print('* * *')\n    print('*   *')\n    print('*   *\\n')\n\ndef print_big_O():\n    print('*****')\n    print('*   *')\n    print('*   *')\n    print('*   *')\n    print('*****\\n')\n\ndef print_two_big_Os():\n    print_big_O()\n    print_big_O()\n\n# We've changed the order here:\nprint_two_big_Os()\nprint_big_M()\n\n\n2.11 Exercise: Describe in your module pdf how the output would be different, first without typing up the program, and then typing it up in animal_sounds3.py."
  },
  {
    "objectID": "units/unit0/modules/module2.html#a-peek-at-the-future",
    "href": "units/unit0/modules/module2.html#a-peek-at-the-future",
    "title": "Module 2: Functions: a first look",
    "section": "2.3    A peek at the future",
    "text": "2.3    A peek at the future\nOnce again, we will present a small program with features yet to be explained, by way of getting you comfortable and yet curious.\nHere’s the program:\nimport tkinter as tk\nimport random as rand\n\nwindow = tk.Tk()\nw = 500\nh = 400\ncanvas = tk.Canvas(master=window, width=w, height=h)\ncanvas.pack()\n\n# A function that draws a random circle\ndef draw_random_circle(color):\n    x = rand.randint(0, w)\n    y = rand.randint(0, h)\n    size = rand.randint(0, w/10)\n    canvas.create_oval(x,y, x+size, y+size, fill=color)\n\n# draw 100 circles\nfor i in range(100):\n    draw_random_circle(\"cyan\")\n\n# Standard colors: \"black\", \"red\", \"green\", \"blue\", \n# \"cyan\", \"yellow\", \"magenta\"\n\nwindow.mainloop()\n\n2.12 Exercise: Type up the above program in random_art.py and execute it.\nNow let’s point out a few features: \n\n\n2.13 Exercise: Use the same code in random_art2.py and then add and modify it to create your own art, and include a screenshot in module2.pdf. When you quit your program, instead of x-ing out the window, type control-c (“control” key and “c” key pressed together) while the cursor is in the output window.\nAbout control-c\n\nThe standard keyboard has some keys that act together with other keys, in effect modifying them.\nThe shift key is the most obvious one: pressing the shift key along with another key either capitalizes a letter or types the symbol “above” in a two-symbol key. For example, the ampersand & is “above” 7 on the same key as 7; thus, pressing shift and 7 achieves typing &\nOn a Mac, you’ve probably used the command key, and on Windows, you’ve used control.\nThe control key, when used with other keys is often used in programming contexts.\nOne such case is to use control-c (control and c together) to terminate the execution of a program.\nHowever, to do this, you first need to click into wherever the program is executing. This is typically the output window (where the output appears)."
  },
  {
    "objectID": "units/unit0/modules/module2.html#and-now-for-something-strange",
    "href": "units/unit0/modules/module2.html#and-now-for-something-strange",
    "title": "Module 2: Functions: a first look",
    "section": "2.4 And now for something strange",
    "text": "2.4 And now for something strange\nConsider the following program:\ndef print_big_M():   \n    print('*   *')\n    print('** **')\n    print('* * *')\n    print('*   *')\n    print('*   *\\n')\n\ndef print_big_O():   \n    print('*****')\n    print('*   *')\n    print('*   *')\n    print('*   *')\n    print('*****\\n')\n    print_big_O()    # We're invoking the function from within\n\nprint_big_M()\nprint_big_O()\n\n2.15 Exercise: Mentally execute the above program. That is, without typing it up, try to follow how the program executes, step by step Which statement gets executed in the 10-th step of execution? Do you notice anything unusual at step 13? As a result, what line is executed in step 15? Write your answer in your module pdf (module2.pdf).\n\n\n2.16 Exercise: Before doing this exercise, please read this page on how to stop endlessly running programs. Now, type up and execute the above program in my_strange_example.py. What do you notice? (Or you might get an “recursion depth exceeded” error.)\nThe term recursion is used when function calls itself: - In the above example, it’s an obvious error        ⇒ Nothing useful is accomplished.\n\nLater, we’ll learn to use recursion to solve problems.\nIn fact, recursion is one of the most powerful computational problem-solving paradigms."
  },
  {
    "objectID": "units/unit0/modules/module2.html#another-reminder-about-computerese",
    "href": "units/unit0/modules/module2.html#another-reminder-about-computerese",
    "title": "Module 2: Functions: a first look",
    "section": "2.5 Another reminder about computerese",
    "text": "2.5 Another reminder about computerese\nHow is your computerese coming along? Are you now much more confident with folders, files, zip files and such? What about editing, and saving?\nDon’t forget that you can always review the material on computerese from Module 0.\nPlease check that your module2 folder has the right files before you zip and upload. Does it look like one of these sample screenshots:\n\n\n\nMac\n\n\nor\n\n\n\nWindows\n\n\n?\n Previous Module: Module 1 Next Module: Module 3"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Email: Dr. Kartik Bulusu"
  },
  {
    "objectID": "about.html#instructor",
    "href": "about.html#instructor",
    "title": "About",
    "section": "",
    "text": "Email: Dr. Kartik Bulusu"
  },
  {
    "objectID": "about.html#timelocation-of-course",
    "href": "about.html#timelocation-of-course",
    "title": "About",
    "section": "Time/Location of course",
    "text": "Time/Location of course\nThis is a fully asychronous course: there are no fixed meeting times, nor any attendance requirement. All the material is released on day 1. You will be expected to submit work according to the schedule on the Coursework page."
  },
  {
    "objectID": "about.html#office-hours",
    "href": "about.html#office-hours",
    "title": "About",
    "section": "Office Hours",
    "text": "Office Hours\nTBD"
  },
  {
    "objectID": "about.html#why-are-there-no-recorded-video-lectures",
    "href": "about.html#why-are-there-no-recorded-video-lectures",
    "title": "About",
    "section": "Why are there no recorded video lectures?",
    "text": "Why are there no recorded video lectures?\nLearning to program by watching some talk about it is less effective than learning by “doing programming”. Thus, most of your learning will consist of reading a concept, seeing an example, and immediately following that with a programming exercise that really gets into the details. At the same time, we know it’s useful to have hints and explanations to help you in your exercises, when you are particularly stuck. Accordingly, although most of the material is written, and includes elaborate instructions, there is recorded media that you can optionally view/listen if you need it. These are recorded from a student point of view (but carefully vetted by us), as you’ll see."
  },
  {
    "objectID": "about.html#teaching-assistants-tas",
    "href": "about.html#teaching-assistants-tas",
    "title": "About",
    "section": "Teaching Assistants (TAs)",
    "text": "Teaching Assistants (TAs)\nInfo will be posted on BB."
  },
  {
    "objectID": "about.html#ta-office-hours",
    "href": "about.html#ta-office-hours",
    "title": "About",
    "section": "TA office hours",
    "text": "TA office hours\nFriday afternoons (time/link on BB)"
  },
  {
    "objectID": "about.html#ta-email",
    "href": "about.html#ta-email",
    "title": "About",
    "section": "TA email",
    "text": "TA email\nInfo will be posted on BB."
  },
  {
    "objectID": "about.html#prerequisites",
    "href": "about.html#prerequisites",
    "title": "About",
    "section": "Prerequisites",
    "text": "Prerequisites\nNone"
  },
  {
    "objectID": "about.html#official-catalog-description",
    "href": "about.html#official-catalog-description",
    "title": "About",
    "section": "Official catalog description",
    "text": "Official catalog description\nIntroduction to programming a computer using the Python language; variables, types, assignment, conditionals, loops, lists, and program units. (Fall, spring, and summer, Every Year)."
  },
  {
    "objectID": "about.html#informal-description",
    "href": "about.html#informal-description",
    "title": "About",
    "section": "Informal description",
    "text": "Informal description\nThis course is all about getting started with programming in the language called Python."
  },
  {
    "objectID": "about.html#specific-learning-outcomes",
    "href": "about.html#specific-learning-outcomes",
    "title": "About",
    "section": "Specific learning outcomes",
    "text": "Specific learning outcomes\nBy the end of the course, you will be able to - Demonstrate familiarity with key concepts in a procedural programming language such as: variables, control structures, functions, input and output. - Demonstrate the ability to use programming to solve problems appropriate to a beginning class in programming. - Acquire familiarity with how programming can be applied to solve problems."
  },
  {
    "objectID": "about.html#textbook",
    "href": "about.html#textbook",
    "title": "About",
    "section": "Textbook",
    "text": "Textbook\nAll of the material is online (and free)."
  },
  {
    "objectID": "about.html#other-requirements",
    "href": "about.html#other-requirements",
    "title": "About",
    "section": "Other requirements",
    "text": "Other requirements\n\nYou will be expected to have and use your Blackboard account. If you have trouble logging in, you will need to resolve this by the first meeting."
  },
  {
    "objectID": "about.html#staying-on-top-of-the-course",
    "href": "about.html#staying-on-top-of-the-course",
    "title": "About",
    "section": "Staying on top of the course",
    "text": "Staying on top of the course\n\nVisit the course website (this one) and the Blackboard part of this course several times each week.\nBe responsive to email sent to you."
  },
  {
    "objectID": "about.html#course-load",
    "href": "about.html#course-load",
    "title": "About",
    "section": "Course load",
    "text": "Course load\nThis is not a light course. The course has three units, each of which has a number of modules. Based on students who’ve taken the course previously, we’ve identified the approximate number of hours needed for each module.\nImportant: the hours needed vary by module, so please plan accordingly. The first unit starts off gently, after which the pace increases. Unit-1 is the hardest."
  },
  {
    "objectID": "about.html#coursework-and-grading",
    "href": "about.html#coursework-and-grading",
    "title": "About",
    "section": "Coursework and grading",
    "text": "Coursework and grading\nSee approximate grade breakdown."
  },
  {
    "objectID": "about.html#assignment-submission-and-late-work-policy",
    "href": "about.html#assignment-submission-and-late-work-policy",
    "title": "About",
    "section": "Assignment submission and late work policy",
    "text": "Assignment submission and late work policy\n\nAll your work will be submitted via Blackboard.\nLate submission policy. Every student will get to use three extensions in the semester:\n\nA single-use 1-day extension.\nA single-use 2-day extension.\nA single-use 4-day extension.\nA single-use 6-day extension.\n\nEach extension can be used only once, and the entire extension will be applied. (That is, you can’t submit something three days late, and claim that you’ve used only part of the 4-day extension.) You do NOT need to tell us you are using an extension, we will merely apply the best fit in the order we get the submissions. You also cannot pick and choose which extension to apply.\nWe’re doing extensions ONLY because because everyone gets ill or has the occasional sudden emergency. It is NOT intended to be used as a tool for time-management or convenience.\nFor all other submissions where the extension does not apply, we will take off 25% per day late. These points taken off will NOT not be pro-rated hourly. Thus, if something is due 5pm March 19th, a submission at 5.05pm March 19th has 25% taken off.\nYou get bonus points if you don’t use any extensions at all and if you don’t submit anything late.\nIf you’re seeking an extension because you’ve been seriously ill and have a letter from a doctor, communicate with the TA.\nYou cannot use any extension resulting in a submission past the last due date."
  },
  {
    "objectID": "about.html#academic-integrity-policy",
    "href": "about.html#academic-integrity-policy",
    "title": "About",
    "section": "Academic Integrity policy",
    "text": "Academic Integrity policy\n\nIn this course, you will be expected to work on all assigned coursework by yourself, unless otherwise specified by instructions on this site.\nYou may not, without permission from the instructor, exchange course-related code with anyone (including anyone not registered in the course), or download code for use in your coursework, or use material from books other than the textbook. Likewise, you may not look at anyone else’s code or show your code to anyone else.\nImportant: We have sophisticated tools that automatically examine all students’ code and that perform a comparison. These tools are very good at determining similarity in code. We also reserve the right to ask you probing questions about submitted work; failure to answer these questions may result in loss of points for the submitted work.\nImportant: Parts of the final exam will feature small variations of the assigned work but without electronic access to your computer. Thus, you will succeed in the exam only if you actually do the assigned work.\nIf you use material in your assignments that are from outside the course material, then you should be prepared to explain that material. The instructors and TAs reserve the right to question you on your use of any extraneous material. Failure to answer such questions might be viewed as grounds for an integrity violation.\nThe Academic Integrity Code will apply to this course. Please read through the code carefully. Penalties for violating the code or the policies described here include failing this course.\nIf you have a disability that may effect your participation in this course and wish to discuss academic acommodations, please contact us as soon as possible."
  },
  {
    "objectID": "about.html#minimum-course-load",
    "href": "about.html#minimum-course-load",
    "title": "About",
    "section": "Minimum course load",
    "text": "Minimum course load\nIn a 15-week semester, including exam week, students are expected to spend a minimum of 100 minutes of out-of-class work for every 50 minutes of direct instruction, for a minimum total of 2.5 hours a week. A 3-credit course includes 2.5 hours of direct instruction and a minimum of 5 hours of independent learning, or a minimum of 7.5 hours per week. More information about GW’s credit hour policy can be found at: provost.gwu.edu/policies-forms"
  },
  {
    "objectID": "about.html#statement-on-inclusive-teaching",
    "href": "about.html#statement-on-inclusive-teaching",
    "title": "About",
    "section": "Statement on inclusive teaching",
    "text": "Statement on inclusive teaching\nIt is my intent that students from all backgrounds and perspectives be well-served by this course, and that the diversity that the students bring to this class be viewed as a resource, strength and benefit. Your suggestions are encouraged and appreciated. Please let me know ways to improve the effectiveness of the course for you personally, or for other students or student groups."
  },
  {
    "objectID": "about.html#gws-emergency-preparedness-guide",
    "href": "about.html#gws-emergency-preparedness-guide",
    "title": "About",
    "section": "GW’s emergency preparedness guide",
    "text": "GW’s emergency preparedness guide"
  },
  {
    "objectID": "about.html#finally-note-that-course-policies-may-be-adjusted-or-modified-during-the-course-of-the-semester.",
    "href": "about.html#finally-note-that-course-policies-may-be-adjusted-or-modified-during-the-course-of-the-semester.",
    "title": "About",
    "section": "Finally, note that course policies may be adjusted or modified during the course of the semester.",
    "text": "Finally, note that course policies may be adjusted or modified during the course of the semester."
  },
  {
    "objectID": "coursework.html",
    "href": "coursework.html",
    "title": "Coursework",
    "section": "",
    "text": "Important:"
  },
  {
    "objectID": "coursework.html#schedule",
    "href": "coursework.html#schedule",
    "title": "Coursework",
    "section": "Schedule",
    "text": "Schedule\n\n\n\nWeek\nTopic\nDue (Due Date)\n\n\n\n\n16 Jan\nFirst Lecture\nNothing due\n\n\n23 Jan\n2nd Lecture\nNothing due"
  }
]